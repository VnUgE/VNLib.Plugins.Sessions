<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VNLib.Plugins</name>
    </assembly>
    <members>
        <member name="T:VNLib.Plugins.ConfigurationInitalizerAttribute">
            <summary>
            Set this attribute on an <see cref="T:VNLib.Plugins.IPlugin"/> instance method to define the configuration initializer.
            This attribute can only be defined on a single instance method and cannot be overloaded.
            <br></br>
            A plugin host should invoke this method before <see cref="M:VNLib.Plugins.IPlugin.Load"/>
            <br></br>
            Method signature <code>public void [methodname] (<see cref="T:System.Text.Json.JsonDocument"/> config)</code> 
            </summary>
        </member>
        <member name="T:VNLib.Plugins.ConfigInitializer">
            <summary>
            Represents a safe configuration initializer delegate method
            </summary>
            <param name="config">The configuration object that plugin will use</param>
        </member>
        <member name="T:VNLib.Plugins.Attributes.ConsoleEventHandlerAttribute">
            <summary>
            <para>
            Set this attribute on an <see cref="T:VNLib.Plugins.IPlugin"/> instance method to define the console message event handler
            This attribute can only be defined on a single instance method and cannot be overloaded.
            </para>
            <para>
            Method signature <code>public void [methodname] (<see cref="T:System.String"/> command)</code> 
            </para>
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Attributes.ConsoleEventHandler">
            <summary>
            Represents a safe console event delegate method
            </summary>
            <param name="command">The command to be passed to the plugin</param>
        </member>
        <member name="T:VNLib.Plugins.LogInitializerAttribute">
            <summary>
            Set this attribute on an <see cref="T:VNLib.Plugins.IPlugin"/> instance method to define the log initalizer.
            This attribute can only be defined on a single instance method and cannot be overloaded.
            <br></br>
            A plugin host should invoke this method before <see cref="M:VNLib.Plugins.IPlugin.Load"/> but after a <see cref="T:VNLib.Plugins.ConfigurationInitalizerAttribute"/> method
            <br></br>
            Method signature <code>public void [methodname] (<see cref="T:System.String"/>[] cmdArgs)</code> 
            </summary>
        </member>
        <member name="T:VNLib.Plugins.LogInitializer">
            <summary>
            Represents a safe logger initializer delegate method
            </summary>
            <param name="args">The arguments to pass to the log iniializer (usually command line args)</param>
        </member>
        <member name="T:VNLib.Plugins.IEndpoint">
            <summary>
            A base class for all entity processing endpoints to listen for requests
            </summary>
        </member>
        <member name="P:VNLib.Plugins.IEndpoint.Path">
            <summary>
            The location path for which to match this handler
            </summary>
        </member>
        <member name="T:VNLib.Plugins.VfReturnType">
            <summary>
            Represents the result of a virutal endpoint processing operation
            </summary>
        </member>
        <member name="F:VNLib.Plugins.VfReturnType.ProcessAsFile">
            <summary>
            Signals that the virtual endpoint 
            </summary>
        </member>
        <member name="F:VNLib.Plugins.VfReturnType.VirtualSkip">
            <summary>
            Signals that the virtual endpoint generated a response, and 
            the connection should be completed
            </summary>
        </member>
        <member name="F:VNLib.Plugins.VfReturnType.Forbidden">
            <summary>
            Signals that the virtual endpoint determined that the connection 
            should be denied.
            </summary>
        </member>
        <member name="F:VNLib.Plugins.VfReturnType.NotFound">
            <summary>
            Signals that the resource the virtual endpoint was processing 
            does not exist.
            </summary>
        </member>
        <member name="F:VNLib.Plugins.VfReturnType.BadRequest">
            <summary>
            Signals that the virutal endpoint determined the request was invalid
            </summary>
        </member>
        <member name="F:VNLib.Plugins.VfReturnType.Error">
            <summary>
            Signals that the virtual endpoint had an error
            </summary>
        </member>
        <member name="T:VNLib.Plugins.IPlugin">
            <summary>
            Allows for applications to define plugin capabilities
            </summary>
        </member>
        <member name="P:VNLib.Plugins.IPlugin.PluginName">
            <summary>
            The name of the plugin to referrence (may be used by the host to interact)
            </summary>
        </member>
        <member name="M:VNLib.Plugins.IPlugin.Load">
            <summary>
            Performs operations to prepare the plugin for use
            </summary>
        </member>
        <member name="M:VNLib.Plugins.IPlugin.Unload">
            <summary>
            Invoked when the plugin is unloaded from the runtime
            </summary>
        </member>
        <member name="M:VNLib.Plugins.IPlugin.GetEndpoints">
            <summary>
            Returns all endpoints within the plugin to load into the current root
            </summary>
            <returns>An enumeration of endpoints to load</returns>
        </member>
        <member name="T:VNLib.Plugins.IVirtualEndpoint`1">
            <summary>
            Represents a virtual page which provides processing on an entity
            </summary>
            <typeparam name="TEntity">The entity type to process</typeparam>
        </member>
        <member name="M:VNLib.Plugins.IVirtualEndpoint`1.Process(`0)">
            <summary>
            The handler method for processing the specified location.
            </summary>
            <param name="entity">The current connection/session </param>
            <returns>A <see cref="T:VNLib.Plugins.VfReturnType"/> specifying how the caller should continue processing the request</returns>
        </member>
        <member name="P:VNLib.Plugins.WebMessage.Token">
            <summary>
            The encrypted access token for the client to use after a login request
            </summary>
        </member>
        <member name="P:VNLib.Plugins.WebMessage.Result">
            <summary>
            The result of the REST operation to send to client
            </summary>
        </member>
        <member name="P:VNLib.Plugins.WebMessage.Success">
            <summary>
            A status flag/result of the REST operation
            </summary>
        </member>
    </members>
</doc>
