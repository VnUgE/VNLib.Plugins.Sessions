<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VNLib.Plugins.Extensions.Loading</name>
    </assembly>
    <members>
        <member name="T:VNLib.Plugins.Extensions.Loading.AssemblyLoader`1">
            <summary>
            <para>
            Represents a disposable assembly loader wrapper for 
            exporting a signle type from a loaded assembly
            </para>
            <para>
            If the loaded type implements <see cref="T:System.IDisposable"/> the 
            dispose method is called when the loader is disposed
            </para>
            </summary>
            <typeparam name="T">The exported type to manage</typeparam>
        </member>
        <member name="P:VNLib.Plugins.Extensions.Loading.AssemblyLoader`1.Resource">
            <summary>
            The instance of the loaded type
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.AssemblyLoader`1.LoadAndGetExportedType">
            <summary>
            Loads the default assembly and gets the expected export type,
            creates a new instance, and calls its parameterless constructor
            </summary>
            <returns>The desired type instance</returns>
            <exception cref="T:System.EntryPointNotFoundException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.AssemblyLoader`1.Free">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.AssemblyLoader`1.Load(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new assembly loader for the specified type and 
            </summary>
            <param name="assemblyName">The name of the assmbly within the current plugin directory</param>
            <param name="unloadToken">The plugin unload token</param>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationNameAttribute">
            <summary>
            Specifies a configuration variable name in the plugin's configuration 
            containing data specific to the type
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationNameAttribute.ConfigVarName">
            <summary>
            
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationNameAttribute"/>
            </summary>
            <param name="configVarName">The name of the configuration variable for the class</param>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions">
            <summary>
            Contains extensions for plugin configuration specifc extensions
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.GetConfigForType``1(VNLib.Plugins.PluginBase)">
            <summary>
            Retrieves a top level configuration dictionary of elements for the specified type.
            The type must contain a <see cref="T:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationNameAttribute"/>
            </summary>
            <typeparam name="T">The type to get the configuration of</typeparam>
            <param name="plugin"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of top level configuration elements for the type</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.GetConfig(VNLib.Plugins.PluginBase,System.String)">
            <summary>
            Retrieves a top level configuration dictionary of elements with the specified property name,
            from the plugin config first, or falls back to the host config file
            </summary>
            <param name="plugin"></param>
            <param name="propName">The config property name to retrieve</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of top level configuration elements for the type</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.TryGetConfig(VNLib.Plugins.PluginBase,System.String)">
            <summary>
            Retrieves a top level configuration dictionary of elements with the specified property name,
            from the plugin config first, or falls back to the host config file
            </summary>
            <param name="plugin"></param>
            <param name="propName">The config property name to retrieve</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of top level configuration elements for the type</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.GetConfigForType(VNLib.Plugins.PluginBase,System.Type)">
            <summary>
            Retrieves a top level configuration dictionary of elements for the specified type.
            The type must contain a <see cref="T:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationNameAttribute"/>
            </summary>
            <param name="plugin"></param>
            <param name="type">The type to get configuration data for</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of top level configuration elements for the type</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.GetConfig(VNLib.Plugins.PluginBase,System.Object)">
            <summary>
            Shortcut extension for <see cref="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.GetConfigForType``1(VNLib.Plugins.PluginBase)"/> to get 
            config of current class
            </summary>
            <param name="obj">The object that a configuration can be retrieved for</param>
            <param name="plugin">The plugin containing configuration variables</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of top level configuration elements for the type</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.HasConfigForType``1(VNLib.Plugins.PluginBase)">
            <summary>
            Determines if the current plugin configuration contains the require properties to initialize 
            the type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="plugin"></param>
            <returns>True if the plugin config contains the require configuration property</returns>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Configuration.ConfigurationExtensions.TryGetS3Config(VNLib.Plugins.PluginBase)">
            <summary>
            Attempts to load the basic S3 configuration variables required
            for S3 client access
            </summary>
            <param name="plugin"></param>
            <returns>The S3 configuration object found in the plugin/host configuration</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.AsyncIntervalAttribute">
            <summary>
            When added to a method schedules it as a callback on a specified interval when 
            the plugin is loaded, and stops when unloaded
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.AsyncIntervalAttribute.#ctor(System.Int32)">
            <summary>
            Intializes the <see cref="T:VNLib.Plugins.Extensions.Loading.Events.AsyncIntervalAttribute"/> with the specified timeout in milliseconds
            </summary>
            <param name="milliseconds">The interval in milliseconds</param>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.ConfigurableAsyncIntervalAttribute">
            <summary>
            When added to a method schedules it as a callback on a specified interval when 
            the plugin is loaded, and stops when unloaded
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.ConfigurableAsyncIntervalAttribute.#ctor(System.String,VNLib.Plugins.Extensions.Loading.Events.IntervalResultionType)">
            <summary>
            Initializes a <see cref="T:VNLib.Plugins.Extensions.Loading.Events.ConfigurableAsyncIntervalAttribute"/> with the specified
            interval property name
            </summary>
            <param name="configPropName">The configuration property name for the event interval</param>
            <param name="resolution">The time resoltion for the event interval</param>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.EventHandle">
            <summary>
            Represents a handle to a scheduled event interval that is managed by the plugin but may be cancled by disposing the instance
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.EventHandle.Pause">
            <summary>
            Pauses the event timer until the <see cref="T:VNLib.Utils.OpenHandle"/> is released or disposed
            then resumes to the inital interval period
            </summary>
            <returns>A <see cref="T:VNLib.Utils.OpenHandle"/> that restores the timer to its initial state when disposed</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.EventHandle.Free">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.AsyncSchedulableCallback`1">
            <summary>
            A deletage to form a method signature for shedulable interval callbacks
            </summary>
            <typeparam name="T">The state type</typeparam>
            <param name="state">The state instance to pass to event handler</param>
            <param name="pluginExitToken">The plugin's exit token</param>
            <returns>A task the represents the asynchronous work</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.EventManagment">
            <summary>
            Provides event schedueling extensions for plugins
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.EventManagment.ScheduleInterval``1(VNLib.Plugins.PluginBase,VNLib.Plugins.Extensions.Loading.Events.AsyncSchedulableCallback{``0},``0,System.TimeSpan)">
            <summary>
            Schedules an asynchronous event interval for the current plugin, that is active until canceled or until the plugin unloads
            </summary>
            <typeparam name="TState">Stateful event argument</typeparam>
            <param name="plugin"></param>
            <param name="asyncCallback">An asyncrhonous callback method.</param>
            <param name="state"></param>
            <param name="interval">The event interval</param>
            <returns>An <see cref="T:VNLib.Plugins.Extensions.Loading.Events.EventHandle"/> that can manage the interval state</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <remarks>If exceptions are raised during callback execution, they are written to the plugin's default log provider</remarks>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.EventManagment.ScheduleInterval(VNLib.Plugins.PluginBase,VNLib.Plugins.Extensions.Loading.Events.IIntervalScheduleable,System.TimeSpan)">
            <summary>
            Registers an <see cref="T:VNLib.Plugins.Extensions.Loading.Events.IIntervalScheduleable"/> type's event handler for 
            raising timed interval events
            </summary>
            <param name="plugin"></param>
            <param name="scheduleable">The instance to schedule for timeouts</param>
            <param name="interval">The timeout interval</param>
            <returns>An <see cref="T:VNLib.Plugins.Extensions.Loading.Events.EventHandle"/> that can manage the interval state</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <remarks>If exceptions are raised during callback execution, they are written to the plugin's default log provider</remarks>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.IIntervalScheduleable">
            <summary>
            Exposes a type for asynchronous event schelueling
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Events.IIntervalScheduleable.OnIntervalAsync(VNLib.Utils.Logging.ILogProvider,System.Threading.CancellationToken)">
            <summary>
            A method that is called when the interval time has elapsed
            </summary>
            <param name="log">The plugin default log provider</param>
            <param name="cancellationToken">A token that may cancel an operations if the plugin becomes unloaded</param>
            <returns>A task that resolves when the async operation completes</returns>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Events.IntervalResultionType">
            <summary>
            The configurable event interval resulution type
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Extensions.Loading.Events.IntervalResultionType.Milliseconds">
            <summary>
            Specifies event interval resolution in milliseconds
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Extensions.Loading.Events.IntervalResultionType.Seconds">
            <summary>
            Specifies event interval resolution in seconds
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Extensions.Loading.Events.IntervalResultionType.Minutes">
            <summary>
            Specifies event interval resolution in minutes
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Extensions.Loading.Events.IntervalResultionType.Hours">
            <summary>
            Specifies event interval resolution in hours
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.LoadingExtensions">
            <summary>
            Provides common loading (and unloading when required) extensions for plugins
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.LoadingExtensions.GetPasswords(VNLib.Plugins.PluginBase)">
            <summary>
            Gets the plugins ambient <see cref="T:VNLib.Plugins.Essentials.Accounts.PasswordHashing"/> if loaded, or loads it if required. This class will
            be unloaded when the plugin us unloaded.
            </summary>
            <param name="plugin"></param>
            <returns>The ambient <see cref="T:VNLib.Plugins.Essentials.Accounts.PasswordHashing"/></returns>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.LoadingExtensions.LoadAssembly``1(VNLib.Plugins.PluginBase,System.String,System.IO.SearchOption)">
            <summary>
            Loads an assembly into the current plugins AppDomain and will unload when disposed
            or the plugin is unloaded from the host application. 
            </summary>
            <typeparam name="T">The desired exported type to load from the assembly</typeparam>
            <param name="plugin"></param>
            <param name="assemblyName">The name of the assembly (ex: 'file.dll') to search for</param>
            <param name="dirSearchOption">Directory/file search option</param>
            <returns>The <see cref="T:VNLib.Plugins.Extensions.Loading.AssemblyLoader`1"/> managing the loaded assmbly in the current AppDomain</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.EntryPointNotFoundException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.LoadingExtensions.IsDebug(VNLib.Plugins.PluginBase)">
            <summary>
            Determintes if the current plugin config has a debug propety set
            </summary>
            <param name="plugin"></param>
            <returns>True if debug mode is enabled, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.LoadingExtensions.ThrowIfUnloaded(VNLib.Plugins.PluginBase)">
            <summary>
            Internal exception helper to raise <see cref="T:System.ObjectDisposedException"/> if the plugin has been unlaoded
            </summary>
            <param name="plugin"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.Routing.RoutingExtensions">
            <summary>
            Provides advanced QOL features to plugin loading
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Routing.RoutingExtensions.Route``1(VNLib.Plugins.PluginBase,System.String)">
            <summary>
            Constructs and routes the specific endpoint type for the current plugin
            </summary>
            <typeparam name="T">The <see cref="T:VNLib.Plugins.IEndpoint"/> type</typeparam>
            <param name="plugin"></param>
            <param name="pluginConfigPathName">The path to the plugin sepcific configuration property</param>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.Routing.RoutingExtensions.Route``1(VNLib.Plugins.PluginBase)">
            <summary>
            Constructs and routes the specific endpoint type for the current plugin
            </summary>
            <typeparam name="T">The <see cref="T:VNLib.Plugins.IEndpoint"/> type</typeparam>
            <param name="plugin"></param>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Extensions.Loading.PluginSecretLoading">
            <summary>
            Adds loading extensions for secure/centralized configuration secrets
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.PluginSecretLoading.TryGetSecretAsync(VNLib.Plugins.PluginBase,System.String)">
            <summary>
            <para>
            Gets a secret from the "secrets" element. The 
            </para>
            <para>
            Secrets elements are merged from the host config and plugin local config 'secrets' element.
            before searching. The plugin config takes precedence over the host config.
            </para>
            </summary>
            <param name="plugin"></param>
            <param name="secretName">The name of the secret propery to get</param>
            <returns>The element from the configuration file with the given name, or null if the configuration or propery does not exist</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Extensions.Loading.PluginSecretLoading.GetSecretFromVaultAsync(VNLib.Plugins.PluginBase,System.ReadOnlySpan{System.Char})">
            <summary>
            Gets a secret at the given vault url (in the form of "vault://[mount-name]/[secret-path]?secret=[secret_name]")
            </summary>
            <param name="plugin"></param>
            <param name="vaultPath">The raw vault url to lookup</param>
            <returns>The string of the object at the specified vault path</returns>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
    </members>
</doc>
