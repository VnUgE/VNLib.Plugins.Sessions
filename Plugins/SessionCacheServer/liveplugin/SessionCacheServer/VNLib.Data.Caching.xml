<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VNLib.Data.Caching</name>
    </assembly>
    <members>
        <member name="T:VNLib.Data.Caching.BlobCache">
            <summary>
            A general purpose binary data storage
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.BlobCache.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Data.Caching.BlobCache.MaxCapacity">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.BlobCache.#ctor(System.IO.DirectoryInfo,System.Int32,VNLib.Utils.Logging.ILogProvider,VNLib.Utils.Memory.IUnmangedHeap)">
            <summary>
            Initializes a new <see cref="T:VNLib.Data.Caching.BlobCache"/> store
            </summary>
            <param name="swapDir">The <see cref="T:VNLib.Utils.IO.IsolatedStorageDirectory"/> to swap blob data to when cache</param>
            <param name="maxCapacity">The maximum number of items to keep in memory</param>
            <param name="log">A <see cref="T:VNLib.Utils.Logging.ILogProvider"/> to write log data to</param>
            <param name="heap">A <see cref="T:VNLib.Utils.Memory.IUnmangedHeap"/> to allocate buffers and store <see cref="T:VNLib.Data.Caching.BlobItem"/> data in memory</param>
        </member>
        <member name="M:VNLib.Data.Caching.BlobCache.CacheMiss(System.String,VNLib.Utils.Memory.MemoryHandle{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.BlobCache.Evicted(System.Collections.Generic.KeyValuePair{System.String,VNLib.Utils.Memory.MemoryHandle{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.BlobCache.TryChangeKey(System.String,System.String,VNLib.Utils.Memory.MemoryHandle{System.Byte}@)">
            <summary>
            If the <see cref="T:VNLib.Data.Caching.BlobItem"/> is found in the store, changes the key 
            that referrences the blob. 
            </summary>
            <param name="currentKey">The key that currently referrences the blob in the store</param>
            <param name="newKey">The new key that will referrence the blob</param>
            <param name="blob">The <see cref="T:VNLib.Data.Caching.BlobItem"/> if its found in the store</param>
            <returns>True if the record was found and the key was changes</returns>
        </member>
        <member name="M:VNLib.Data.Caching.BlobCache.Remove(System.String)">
            <summary>
            Removes the <see cref="T:VNLib.Data.Caching.BlobItem"/> from the store without disposing the blobl
            </summary>
            <param name="key">The key that referrences the <see cref="T:VNLib.Data.Caching.BlobItem"/> in the store</param>
            <returns>A value indicating if the blob was removed</returns>
        </member>
        <member name="M:VNLib.Data.Caching.BlobCache.Clear">
            <summary>
            Removes and disposes all blobl elements in cache (or in the backing store)
            </summary>
        </member>
        <member name="T:VNLib.Data.Caching.BlobItem">
            <summary>
            A general purpose binary storage item 
            </summary>
        </member>
        <member name="T:VNLib.Data.Caching.CacheListener">
            <summary>
            A base implementation of a memory/disk LRU data cache FBM listener
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.CacheListener.Directory">
            <summary>
            The directory swap files will be stored
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.CacheListener.Cache">
            <summary>
            The Cache store to access data blobs
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.CacheListener.Heap">
            <summary>
            The <see cref="T:VNLib.Utils.Memory.IUnmangedHeap"/> to allocate buffers from
            </summary>
        </member>
        <member name="M:VNLib.Data.Caching.CacheListener.InitCache(System.IO.DirectoryInfo,System.Int32,VNLib.Utils.Memory.IUnmangedHeap)">
            <summary>
            Initializes the <see cref="P:VNLib.Data.Caching.CacheListener.Cache"/> data store
            </summary>
            <param name="dir">The directory to swap cache records to</param>
            <param name="cacheSize">The size of the LRU cache</param>
            <param name="heap">The heap to allocate buffers from</param>
        </member>
        <member name="T:VNLib.Data.Caching.ClientExtensions">
            <summary>
            Provides caching extension methods for <see cref="T:VNLib.Net.Messaging.FBM.Client.FBMClient"/>
            </summary>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.GetObjectAsync``1(VNLib.Net.Messaging.FBM.Client.FBMClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an object from the server if it exists
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="objectId">The id of the object to get</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>A task that completes to return the results of the response payload</returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:VNLib.Data.Caching.Exceptions.InvalidStatusException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:VNLib.Net.Messaging.FBM.InvalidResponseException"></exception>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.AddOrUpdateObjectAsync``1(VNLib.Net.Messaging.FBM.Client.FBMClient,System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Updates the state of the object, and optionally updates the ID of the object. The data 
            parameter is serialized, buffered, and streamed to the remote server
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="objectId">The id of the object to update or replace</param>
            <param name="newId">An optional parameter to specify a new ID for the old object</param>
            <param name="data">The payload data to serialize and set as the data state of the session</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>A task that resolves when the server responds</returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:VNLib.Data.Caching.Exceptions.InvalidStatusException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:VNLib.Net.Messaging.FBM.InvalidResponseException"></exception>
            <exception cref="T:VNLib.Data.Caching.Exceptions.MessageTooLargeException"></exception>
            <exception cref="T:VNLib.Data.Caching.Exceptions.ObjectNotFoundException"></exception>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.DeleteObjectAsync(VNLib.Net.Messaging.FBM.Client.FBMClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes an object in the remote store
            </summary>
            <param name="client"></param>
            <param name="objectId">The id of the object to update or replace</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>A task that resolves when the operation has completed</returns>
            <exception cref="T:VNLib.Data.Caching.Exceptions.InvalidStatusException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:VNLib.Net.Messaging.FBM.InvalidResponseException"></exception>
            <exception cref="T:VNLib.Data.Caching.Exceptions.ObjectNotFoundException"></exception>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.WaitForChangeAsync(VNLib.Net.Messaging.FBM.Client.FBMClient,System.Threading.CancellationToken)">
            <summary>
            Dequeues a change event from the server event queue for the current connection, or waits until a change happens
            </summary>
            <param name="client"></param>
            <param name="cancellationToken">A token to cancel the deuque operation</param>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that contains the modified object id and optionally its new id</returns>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.ObjectId(VNLib.Net.Messaging.FBM.Server.FBMContext)">
            <summary>
            Gets the Object-id for the request message, or throws an <see cref="T:System.InvalidOperationException"/> if not specified
            </summary>
            <param name="context"></param>
            <returns>The id of the object requested</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.NewObjectId(VNLib.Net.Messaging.FBM.Server.FBMContext)">
            <summary>
            Gets the new ID of the object if specified from the request. Null if the request did not specify an id update
            </summary>
            <param name="context"></param>
            <returns>The new ID of the object if speicifed, null otherwise</returns>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.Method(VNLib.Net.Messaging.FBM.Server.FBMContext)">
            <summary>
            Gets the request method for the request
            </summary>
            <param name="context"></param>
            <returns>The request method string</returns>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.CloseResponse(VNLib.Net.Messaging.FBM.Server.FBMContext,System.String)">
            <summary>
            Closes a response with a status code
            </summary>
            <param name="context"></param>
            <param name="responseCode">The status code to send to the client</param>
        </member>
        <member name="M:VNLib.Data.Caching.ClientExtensions.SetReconnectPolicy``1(``0,System.TimeSpan,System.Uri)">
            <summary>
            Initializes the worker for a reconnect policy and returns an object that can listen for changes
            and configure the connection as necessary
            </summary>
            <param name="worker"></param>
            <param name="retryDelay">The amount of time to wait between retries</param>
            <param name="serverUri">The uri to reconnect the client to</param>
            <returns>A <see cref="T:VNLib.Data.Caching.ClientRetryManager`1"/> for listening for retry events</returns>
        </member>
        <member name="T:VNLib.Data.Caching.ClientRetryManager`1">
            <summary>
            Manages a <see cref="T:VNLib.Net.Messaging.FBM.Client.FBMClientWorkerBase"/> reconnect policy
            </summary>
        </member>
        <member name="E:VNLib.Data.Caching.ClientRetryManager`1.OnBeforeReconnect">
            <summary>
            Raised before client is to be reconnected
            </summary>
        </member>
        <member name="E:VNLib.Data.Caching.ClientRetryManager`1.OnReconnectFailed">
            <summary>
            Raised when the client fails to reconnect. Should return a value that instructs the 
            manager to reconnect
            </summary>
        </member>
        <member name="M:VNLib.Data.Caching.ClientRetryManager`1.Free">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Data.Caching.Constants.Actions">
            <summary>
            Contains constants the define actions
            </summary>
        </member>
        <member name="T:VNLib.Data.Caching.Constants.ResponseCodes">
            <summary>
            Containts constants for operation response codes
            </summary>
        </member>
        <member name="T:VNLib.Data.Caching.Exceptions.InvalidStatusException">
            <summary>
            Raised when the response status code of an FBM Request message is not valid for 
            the specified request
            </summary>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.InvalidStatusException.#ctor(System.String,System.String)">
            <summary>
            Initalizes a new <see cref="T:VNLib.Data.Caching.Exceptions.InvalidStatusException"/> with the specfied status code
            </summary>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.InvalidStatusException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.InvalidStatusException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.InvalidStatusException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Data.Caching.Exceptions.InvalidStatusException.Message">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Data.Caching.Exceptions.MessageTooLargeException">
            <summary>
            Raised when a request (or server response) calculates the size of the message to be too large to proccess
            </summary>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.MessageTooLargeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.MessageTooLargeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.MessageTooLargeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Data.Caching.Exceptions.MessageTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Data.Caching.Exceptions.ObjectNotFoundException">
            <summary>
            Raised when a command was executed on a desired object in the remote cache
            but the object was not found
            </summary>
        </member>
        <member name="T:VNLib.Data.Caching.WaitForChangeResult">
            <summary>
            The result of a cache server change event
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.WaitForChangeResult.Status">
            <summary>
            The operation status code
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.WaitForChangeResult.CurrentId">
            <summary>
            The current (or old) id of the element that changed
            </summary>
        </member>
        <member name="P:VNLib.Data.Caching.WaitForChangeResult.NewId">
            <summary>
            The new id of the element that changed
            </summary>
        </member>
    </members>
</doc>
