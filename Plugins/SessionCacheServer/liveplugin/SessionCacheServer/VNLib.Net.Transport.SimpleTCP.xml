<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VNLib.Net.Transport.SimpleTCP</name>
    </assembly>
    <members>
        <member name="M:VNLib.Net.Transport.Extensions.WriteSocketExecption(VNLib.Utils.Logging.ILogProvider,System.Net.Sockets.SocketException)">
            <summary>
            Writes the specialized log for a socket exception
            </summary>
            <param name="log"></param>
            <param name="se">The socket exception to log</param>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.Dispose">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:VNLib.Net.Transport.ReusableNetworkStream.DisposeInternal">
            <summary>
            Disposes the stream
            </summary>
        </member>
        <member name="M:VNLib.Net.Transport.SocketPipeLineWorker.Start(System.Net.Sockets.Socket)">
            <summary>
            Begins async work to receive and send data on a connected socket
            </summary>
            <param name="client">The socket to read/write from</param>
            <param name="token">A token to cancel any async operations</param>
        </member>
        <member name="T:VNLib.Net.Transport.TCPConfig">
            <summary>
            Represents the required configuration variables for the transport
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.LocalEndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> the listening socket will bind to
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.Log">
            <summary>
            The log provider used to write logging information to
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.ListenerPriority">
            <summary>
            The listening thread priority
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.TcpKeepAliveTime">
            <summary>
            If TCP keepalive is enabled, the amount of time the connection is considered alive before another probe message is sent
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.KeepaliveInterval">
            <summary>
            If TCP keepalive is enabled, the amount of time the connection will wait for a keepalive message
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.TcpKeepalive">
            <summary>
            Enables TCP keepalive
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.AuthenticationOptions">
            <summary>
            The authentication options to use for processing TLS connections. This value must be set when a certificate has been specified
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.AcceptThreads">
            <summary>
            The maximum number of waiting WSA asynchronous socket accept operations
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.InitialReceiveTimeout">
            <summary>
            Specifies the amount of time in miliseconds for a newly accepted socket to wait for 
            the intial receive before closing the connection and releasing the listening thread 
            back to the pool.
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.MaxRecvBufferData">
            <summary>
            The maximum size (in bytes) the transport will buffer in
            the receiving pipeline.
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.BackLog">
            <summary>
            The listener socket backlog value
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.BufferPool">
            <summary>
            The <see cref="T:System.Buffers.ArrayPool`1"/> to allocate pre-load buffers from
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TCPConfig.CacheQuota">
            <summary>
            <para>
            The maxium number of event objects that will be cached 
            during normal operation
            </para>
            <para>
            WARNING: Setting this value too low will cause significant CPU overhead and GC load
            </para>
            </summary>
        </member>
        <member name="T:VNLib.Net.Transport.DataReceived">
            <summary>
            Event delegate used to receive event notifications from a <see cref="T:VNLib.Net.Transport.TcpServer"/>
            instance
            </summary>
            <param name="sender">The <see cref="T:VNLib.Net.Transport.TcpServer"/> that received the request</param>
            <param name="context">A structure of the captured context</param>
            <returns></returns>
        </member>
        <member name="T:VNLib.Net.Transport.TcpServer">
            <summary>
            <para>
            Provides a simple, high performance, single process, low/no allocation,
            asynchronous, event driven, TCP socket server. 
            </para>
            <para>
            IO operations are full duplex so pipe-lining reused 
            connections is expected. This class cannot be inherited
            </para>
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TcpServer.Config">
            <summary>
            The current <see cref="T:VNLib.Net.Transport.TcpServer"/> configuration
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TcpServer.Running">
            <summary>
            Gets a value indicating if the server's listening thread is alive
            </summary>
        </member>
        <member name="M:VNLib.Net.Transport.TcpServer.#ctor(VNLib.Net.Transport.TCPConfig)">
            <summary>
            Initializes a new <see cref="T:VNLib.Net.Transport.TcpServer"/> with the specified <see cref="T:VNLib.Net.Transport.TCPConfig"/>
            </summary>
            <param name="config">Configuration to inalize with</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Net.Transport.TcpServer.CacheClear">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.TcpServer.CacheHardClear">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Net.Transport.TcpServer.Start(System.Threading.CancellationToken)">
            <summary>
            Begins listening for incoming TCP connections on the configured socket
            </summary>
            <param name="token">A token that is used to abort listening operations and close the socket</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Net.Transport.TcpServer.AcceptAsync">
            <summary>
            Retreives a connected socket from the waiting queue
            </summary>
            <returns>The context of the connect</returns>
        </member>
        <member name="M:VNLib.Net.Transport.TcpServer.CloseConnectionAsync(VNLib.Net.Transport.TransportEventContext)">
            <summary>
            Closes a connect and cleans up any resources
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:VNLib.Net.Transport.TransportEventContext">
            <summary>
            Represents the context of a transport connection. It includes the active socket 
            and a stream representing the active transport. 
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TransportEventContext.SslVersion">
            <summary>
            The transport security layer security protocol
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TransportEventContext.LocalEndPoint">
            <summary>
            A copy of the local endpoint of the listening socket
            </summary>
        </member>
        <member name="P:VNLib.Net.Transport.TransportEventContext.RemoteEndpoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> representing the client's connection information
            </summary>
        </member>
        <member name="F:VNLib.Net.Transport.TransportEventContext.ConnectionStream">
            <summary>
            The transport stream to be actively read
            </summary>
        </member>
        <member name="F:VNLib.Net.Transport.TransportEventContext.Socket">
            <summary>
            The socket referrence to the incoming connection
            </summary>
        </member>
        <member name="M:VNLib.Net.Transport.VnSocketAsyncArgs.BeginAccept(System.Net.Sockets.Socket)">
            <summary>
            Begins an asynchronous accept operation on the current (bound) socket 
            </summary>
            <param name="sock">The server socket to accept the connection</param>
            <returns>True if the IO operation is pending</returns>
        </member>
        <member name="M:VNLib.Net.Transport.VnSocketAsyncArgs.EndAccept">
            <summary>
            Determines if an asynchronous accept operation has completed successsfully
            and the socket is connected.
            </summary>
            <returns>True if the accept was successful, and the accepted socket is connected, false otherwise</returns>
        </member>
        <member name="M:VNLib.Net.Transport.VnSocketAsyncArgs.Disconnect">
            <summary>
            Begins an async disconnect operation on a currentl connected socket
            </summary>
            <returns>True if the operation is pending</returns>
        </member>
    </members>
</doc>
