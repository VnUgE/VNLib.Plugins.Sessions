<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VNLib.Plugins.Essentials</name>
    </assembly>
    <members>
        <member name="T:VNLib.Plugins.Essentials.Accounts.AccountManager">
            <summary>
            Provides essential constants, static methods, and session/user extensions 
            to facilitate unified user-controls, athentication, and security
            application-wide
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.MAX_TIME_DIFF_SECS">
            <summary>
            The maximum time in seconds for a login message to be considered valid
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.RANDOM_PASS_SIZE">
            <summary>
            The size in bytes of the random passwords generated when invoking the <see cref="M:VNLib.Plugins.Essentials.Accounts.AccountManager.SetRandomPasswordAsync(VNLib.Plugins.Essentials.Accounts.PasswordHashing,VNLib.Plugins.Essentials.Users.IUserManager,VNLib.Plugins.Essentials.Users.IUser,System.Int32)"/>
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.LOGIN_TOKEN_HEADER">
            <summary>
            The name of the header that will identify a client's identiy
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.LOCAL_ACCOUNT_ORIGIN">
            <summary>
            The origin string of a local user account. This value will be set if an
            account is created through the VNLib.Plugins.Essentials.Accounts library
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.CHALLENGE_SIZE">
            <summary>
            The size (in bytes) of the challenge secret
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.SESSION_CHALLENGE_SIZE">
            <summary>
            The size (in bytes) of the sesssion long user-password challenge
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.LOGIN_COOKIE_NAME">
            <summary>
            The name of the login cookie set when a user logs in
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.LOGIN_COOKIE_IDENTIFIER">
            <summary>
            The name of the login client identifier cookie (cookie that is set fir client to use to determine if the user is logged in)
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.ClientEncryptonPadding">
            <summary>
            The client data encryption padding.
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.TokenHashSize">
            <summary>
            The size (in bytes) of the web-token hash size
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Accounts.AccountManager.SpecialCharacters">
            <summary>
            Speical character regual expresion for basic checks
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.SetRandomPasswordAsync(VNLib.Plugins.Essentials.Accounts.PasswordHashing,VNLib.Plugins.Essentials.Users.IUserManager,VNLib.Plugins.Essentials.Users.IUser,System.Int32)">
            <summary>
            Generates and sets a random password for the specified user account
            </summary>
            <param name="manager">The configured <see cref="T:VNLib.Plugins.Essentials.Users.IUserManager"/> to process the password update on</param>
            <param name="user">The user instance to update the password on</param>
            <param name="passHashing">The <see cref="T:VNLib.Plugins.Essentials.Accounts.PasswordHashing"/> instance to hash the random password with</param>
            <param name="size">Size (in bytes) of the generated random password</param>
            <returns>A value indicating the results of the event (number of rows affected, should evaluate to true)</returns>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.IsLocalAccount(VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            Checks to see if the current user account was created
            using a local account.
            </summary>
            <param name="user"></param>
            <returns>True if the account is a local account, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GetAccountOrigin(VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            If this account was created by any means other than a local account creation. 
            Implementors can use this method to determine the origin of the account.
            This field is not required
            </summary>
            <returns>The origin of the account</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.SetAccountOrigin(VNLib.Plugins.Essentials.Users.IUser,System.String)">
            <summary>
            If this account was created by any means other than a local account creation. 
            Implementors can use this method to specify the origin of the account. This field is not required
            </summary>
            <param name="ud"></param> 
            <param name="origin">Value of the account origin</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GetRandomUserId">
            <summary>
            Gets a random user-id generated from crypograhic random number
            then hashed (SHA1) and returns a hexadecimal string
            </summary>
            <returns>The random string user-id</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GenerateAuthorization(VNLib.Plugins.Essentials.HttpEntity,VNLib.Plugins.Essentials.Accounts.LoginMessage,VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            Runs necessary operations to grant authorization to the specified user of a given session and user with provided variables
            </summary>
            <param name="ev">The connection and session to log-in</param>
            <param name="loginMessage">The message of the client to set the log-in status of</param>
            <param name="user">The user to log-in</param>
            <returns>The encrypted base64 token secret data to send to the client</returns>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GenerateAuthorization(VNLib.Plugins.Essentials.HttpEntity,System.String,System.String,VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            Runs necessary operations to grant authorization to the specified user of a given session and user with provided variables
            </summary>
            <param name="ev">The connection and session to log-in</param>
            <param name="base64PubKey">The clients base64 public key</param>
            <param name="clientId">The browser/client id</param>
            <param name="user">The user to log-in</param>
            <returns>The encrypted base64 token secret data to send to the client</returns>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.TryGenerateToken(System.String,System.String@,System.String@)">
            <summary>
            Computes a random buffer, encrypts it with the client's public key,
            computes the digest of that key and returns the base64 encoded strings 
            of those components
            </summary>
            <param name="base64clientPublicKey">The user's public key credential</param>
            <param name="base64Digest">The base64 encoded digest of the secret that was encrypted</param>
            <param name="base64ClientData">The client's user-agent header value</param>
            <returns>A string representing a unique signed token for a given login context</returns>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.TokenMatches(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Determines if the client sent a token header, and it maches against the current session
            </summary>
            <returns>true if the client set the token header, the session is loaded, and the token matches the session, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.RegenerateClientToken(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Regenerates the user's login token with the public key stored
            during initial logon
            </summary>
            <returns>The base64 of the newly encrypted secret</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.TryEncryptClientData(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.ReadOnlySpan{System.Byte},System.Span{System.Byte}@)">
            <summary>
            Tries to encrypt the specified data using the stored public key and store the encrypted data into 
            the output buffer.
            </summary>
            <param name="session"></param>
            <param name="data">Data to encrypt</param>
            <param name="outputBuffer">The buffer to store encrypted data in</param>
            <returns>
            The number of encrypted bytes written to the output buffer,
            or false (0) if the operation failed, or if no credential is 
            stored.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.TryEncryptClientData(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Span{System.Byte}@)">
            <summary>
            Tries to encrypt the specified data using the specified public key
            </summary>
            <param name="base64PubKey">A base64 encoded public key used to encrypt client data</param>
            <param name="data">Data to encrypt</param>
            <param name="outputBuffer">The buffer to store encrypted data in</param>
            <returns>
            The number of encrypted bytes written to the output buffer,
            or false (0) if the operation failed, or if no credential is 
            specified.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.TryEncryptClientData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte}@)">
            <summary>
            Tries to encrypt the specified data using the specified public key
            </summary>
            <param name="rawPubKey">The raw SKI public key</param>
            <param name="data">Data to encrypt</param>
            <param name="outputBuffer">The buffer to store encrypted data in</param>
            <returns>
            The number of encrypted bytes written to the output buffer,
            or false (0) if the operation failed, or if no credential is 
            specified.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.SetBrowserPubKey(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.String)">
            <summary>
            Stores the clients public key specified during login
            </summary>
            <param name="session"></param>
            <param name="base64PubKey"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GetBrowserPubKey(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            Gets the clients stored public key that was specified during login
            </summary>
            <returns>The base64 encoded public key string specified at login</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.SetLogin(VNLib.Plugins.Essentials.HttpEntity,System.Nullable{System.Boolean})">
            <summary>
            Stores the login key as a cookie in the current session as long as the session exists
            </summary>/
            <param name="ev">The event to log-in</param>
            <param name="localAccount">Does the session belong to a local user account</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.InvalidateLogin(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Invalidates the login status of the current connection and session (if session is loaded)
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.LoginCookieMatches(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Determines if the current session login cookie matches the value stored in the current session (if the session is loaded)
            </summary>
            <returns>True if the session is active, the cookie was properly received, and the cookie value matches the session. False otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.ReconcileCookies(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Determines if the client's login cookies need to be updated
            to reflect its state with the current session's state
            for the client
            </summary>
            <param name="ev"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.SetBrowserID(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.String)">
            <summary>
            Stores the browser's id during a login process
            </summary>
            <param name="session"></param>
            <param name="browserId">Browser id value to store</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GetBrowserID(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            Gets the current browser's id if it was specified during login process
            </summary>
            <returns>The browser's id if set, <see cref="F:System.String.Empty"/> otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.HasLocalAccount(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.Boolean)">
            <summary>
            Specifies that the current session belongs to a local user-account
            </summary>
            <param name="session"></param>
            <param name="value">True for a local account, false otherwise</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.HasLocalAccount(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            Gets a value indicating if the session belongs to a local user account
            </summary>
            <param name="session"></param>
            <returns>True if the current user's account is a local account</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.GenPasswordChallenge(VNLib.Plugins.Essentials.Sessions.SessionInfo@,VNLib.Utils.Memory.PrivateString)">
            <summary>
            Generates a new password challenge for the current session and specified password
            </summary>
            <param name="session"></param>
            <param name="password">The user's password to compute the hash of</param>
            <returns>The raw derrivation key to send to the client</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.VerifyChallenge(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.ReadOnlySpan{System.Char})">
            <summary>
            Verifies the stored unique digest of the user's password against 
            the client derrived password
            </summary>
            <param name="session"></param>
            <param name="base64PasswordDigest">The base64 client derrived digest of the user's password to verify</param>
            <returns>True if formatting was correct and the derrived passwords match, false otherwise</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.HasLevel(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.Byte)">
            <summary>
            Compares the users privilage level against the specified level
            </summary>
            <param name="session"></param>
            <param name="level">64bit privilage level to compare</param>
            <returns>true if the current user has at least the specified level or higher</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.HasGroup(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.UInt16)">
            <summary>
            Determines if the group ID of the current user matches the specified group
            </summary>
            <param name="session"></param>
            <param name="groupId">Group ID to compare</param>
            <returns>true if the user belongs to the group, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.HasOption(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.Byte)">
            <summary>
            Determines if the current user has an equivalent option code
            </summary>
            <param name="session"></param>
            <param name="option">Option code check</param>
            <returns>true if the user options field equals the option</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.CanRead(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            Returns the status of the user's privlage read bit
            </summary>
            <returns>true if the current user has the read permission, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.CanWrite(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            Returns the status of the user's privlage write bit
            </summary>
            <returns>true if the current user has the write permission, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.CanDelete(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            Returns the status of the user's privlage delete bit
            </summary>
            <returns>true if the current user has the delete permission, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.FailedLoginCount(VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            Gets the current number of failed login attempts
            </summary>
            <param name="user"></param>
            <returns>The current number of failed login attempts</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.FailedLoginCount(VNLib.Plugins.Essentials.Users.IUser,System.UInt32)">
            <summary>
            Sets the number of failed login attempts for the current session
            </summary>
            <param name="user"></param>
            <param name="value">The value to set the failed login attempt count</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.FailedLoginCount(VNLib.Plugins.Essentials.Users.IUser,VNLib.Plugins.Essentials.TimestampedCounter)">
            <summary>
            Sets the number of failed login attempts for the current session
            </summary>
            <param name="user"></param>
            <param name="value">The value to set the failed login attempt count</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.AccountManager.FailedLoginIncrement(VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            Increments the failed login attempt count
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Accounts.INonce">
            <summary>
            Represents a object that performs storage and computation of nonce values
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.INonce.ComputeNonce(System.Span{System.Byte})">
            <summary>
            Generates a random nonce for the current instance and 
            returns a base32 encoded string.
            </summary>
            <param name="buffer">The buffer to write a copy of the nonce value to</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.INonce.VerifyNonce(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares the raw nonce bytes to the current nonce to determine 
            if the supplied nonce value is valid
            </summary>
            <param name="nonceBytes">The binary value of the nonce</param>
            <returns>True if the nonce values are equal, flase otherwise</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Accounts.NonceExtensions">
            <summary>
            Provides INonce extensions for computing/verifying nonce values
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.NonceExtensions.ComputeNonce``1(``0,System.Int32)">
            <summary>
            Computes a base32 nonce of the specified size and returns a string
            representation
            </summary>
            <param name="nonce"></param>
            <param name="size">The size (in bytes) of the nonce</param>
            <returns>The base32 string of the computed nonce</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.NonceExtensions.VerifyNonce``1(``0,System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the base32 encoded nonce value against the previously
            generated nonce
            </summary>
            <param name="nonce"></param>
            <param name="base32Nonce">The base32 encoded nonce string</param>
            <returns>True if the nonce values are equal, flase otherwise</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Accounts.LoginMessage">
            <summary>
            A uniform JSON login message for the 
            accounts provider to use
            </summary>
            <remarks>
            NOTE: This class derrives from <see cref="T:VNLib.Utils.Memory.PrivateStringManager"/>
            and should be disposed properly
            </remarks>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.UserName">
            <summary>
            A property 
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.Password">
            <summary>
            A protected string property that 
            may represent a user's password
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.LocalTime">
            <summary>
            Represents the clients local time in a <see cref="T:System.DateTime"/> struct
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.LocalLanguage">
            <summary>
            The clients specified local-language
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.ClientPublicKey">
            <summary>
            The clients shared public key used for encryption, this property is not protected
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.ClientID">
            <summary>
            The clients browser id if shared
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.LoginMessage.#ctor">
            <summary>
            Initailzies a new <see cref="T:VNLib.Plugins.Essentials.Accounts.LoginMessage"/> and its parent <see cref="T:VNLib.Utils.Memory.PrivateStringManager"/> 
            base
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.LoginMessage.#ctor(System.Int32)">
            <summary>
            Allows for derrives classes to have multple protected
            string elements 
            </summary>
            <param name="protectedElementSize">
            The number of procted string elements required
            </param>
            <remarks>
            NOTE: <paramref name="protectedElementSize"/> must be at-least 1
            or access to <see cref="P:VNLib.Plugins.Essentials.Accounts.LoginMessage.Password"/> will throw
            </remarks>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Accounts.SecretAction">
            <summary>
            A delegate method to recover a temporary copy of the secret/pepper
            for a request
            </summary>
            <param name="buffer">The buffer to write the pepper to</param>
            <returns>The number of bytes written to the buffer</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Accounts.PasswordHashing">
            <summary>
            Provides a structrued password hashing system implementing the <seealso cref="T:VNLib.Hashing.VnArgon2"/> library
            with fixed time comparison
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.#ctor(VNLib.Plugins.Essentials.Accounts.SecretAction,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initalizes the <see cref="T:VNLib.Plugins.Essentials.Accounts.PasswordHashing"/> class
            </summary>
            <param name="getter"></param>
            <param name="secreteSize">The expected size of the secret (the size of the buffer to alloc for a copy)</param>
            <param name="saltLen">A positive integer for the size of the random salt used during the hashing proccess</param>
            <param name="timeCost">The Argon2 time cost parameter</param>
            <param name="memoryCost">The Argon2 memory cost parameter</param>
            <param name="hashLen">The size of the hash to produce during hashing operations</param>
            <param name="parallism">
            The Argon2 parallelism parameter (the number of threads to use for hasing) 
            (default = 0 - the number of processors)
            </param>
            <exception cref="T:System.ArgumentNullException"></exception> 
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Verify(VNLib.Utils.Memory.PrivateString,VNLib.Utils.Memory.PrivateString)">
            <summary>
            Verifies a password against its previously encoded hash.
            </summary>
            <param name="passHash">Previously hashed password</param>
            <param name="password">Raw password to compare against</param>
            <returns>true if bytes derrived from password match the hash, false otherwise</returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <exception cref="T:VNLib.Hashing.VnArgon2PasswordFormatException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Verify(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Verifies a password against its previously encoded hash.
            </summary>
            <param name="passHash">Previously hashed password</param>
            <param name="password">Raw password to compare against</param>
            <returns>true if bytes derrived from password match the hash, false otherwise</returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <exception cref="T:VNLib.Hashing.VnArgon2PasswordFormatException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Verifies a password against its hash. Partially exposes the Argon2 api.
            </summary>
            <param name="hash">Previously hashed password</param>
            <param name="salt">The salt used to hash the original password</param>
            <param name="password">The password to hash and compare against </param>
            <returns>true if bytes derrived from password match the hash, false otherwise</returns>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <remarks>Uses fixed time comparison from <see cref="T:System.Security.Cryptography.CryptographicOperations"/> class</remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Hash(VNLib.Utils.Memory.PrivateString)">
            <summary>
            Hashes a specified password, with the initialized pepper, and salted with CNG random bytes.
            </summary>
            <param name="password">Password to be hashed</param>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <returns>A <see cref="T:VNLib.Utils.Memory.PrivateString"/> of the hashed and encoded password</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Hash(System.ReadOnlySpan{System.Char})">
            <summary>
            Hashes a specified password, with the initialized pepper, and salted with CNG random bytes.
            </summary>
            <param name="password">Password to be hashed</param>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <returns>A <see cref="T:VNLib.Utils.Memory.PrivateString"/> of the hashed and encoded password</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Hash(System.ReadOnlySpan{System.Byte})">
            <summary>
            Hashes a specified password, with the initialized pepper, and salted with a CNG random bytes.
            </summary>
            <param name="password">Password to be hashed</param>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
            <returns>A <see cref="T:VNLib.Utils.Memory.PrivateString"/> of the hashed and encoded password</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Accounts.PasswordHashing.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Partially exposes the Argon2 api. Hashes the specified password, with the initialized pepper.
            Writes the raw hash output to the specified buffer
            </summary>
            <param name="password">Password to be hashed</param>
            <param name="salt">Salt to hash the password with</param>
            <param name="hashOutput">The output buffer to store the hashed password to. The exact length of this buffer is the hash size</param>
            <exception cref="T:VNLib.Hashing.VnArgon2Exception"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Content.IPageRouter">
            <summary>
            Determines file routines (routing) for incomming connections
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Content.IPageRouter.RouteAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Determines what file path to return to a user for the given incoming connection 
            </summary>
            <param name="entity">The connection to proccess</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that returns the <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> to pass to the file processor</returns>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EnumerableTable`1.Enumerate">
            <summary>
            The command that will be run against the database to return rows for enumeration
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EnumerableTable`1.TransactionIsolationLevel">
            <summary>
            The isolation level to use when creating the transaction during enumerations
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EnumerableTable`1.GetItemAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Transforms a row from the <paramref name="reader"/> into the item type
            to be returned when yielded.
            </summary>
            <param name="reader">The reader to get the item data from</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>A task that returns the transformed item</returns>
            <remarks>The <paramref name="reader"/> position is set before this method is invoked</remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EnumerableTable`1.CleanupItemAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Invoked when an item is no longer in the enumerator scope, in the enumeration process.
            </summary>
            <param name="item">The item to cleanup</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>A ValueTask that represents the cleanup process</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EnumerableTable`1.GetAsyncEnumerator(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> to enumerate items within the backing store.
            </summary>
            <param name="closeItems">Cleanup items after each item is enumerated and the enumeration scope has 
            returned to the enumerator</param>
            <param name="cancellationToken">A token to cancel the enumeration</param>
            <returns>A <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> to enumerate records within the store</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.EventProcessor">
            <summary>
            Provides an abstract base implementation of <see cref="T:VNLib.Net.Http.IWebRoot"/>
            that breaks down simple processing procedures, routing, and session 
            loading.
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.Current">
            <summary>
            Gets the current (ambient) async local event processor
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.Directory">
            <summary>
            The filesystem entrypoint path for the site
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.Hostname">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.DefaultFiles">
            <summary>
            The name of a default file to search for within a directory if no file is specified (index.html).
            This array should be ordered.
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.ExcludedExtensions">
            <summary>
            File extensions that are denied from being read from the filesystem
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.AllowedAttributes">
            <summary>
            File attributes that must be matched for the file to be accessed
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.DissallowedAttributes">
            <summary>
            Files that match any attribute flag set will be denied
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.TranslateResourcePath(System.String)">
            <summary>
            <para>
            Called when the server intends to process a file and requires translation from a 
            uri path to a usable filesystem path 
            </para>
            <para>
            NOTE: This function must be thread-safe!
            </para>
            </summary>
            <param name="requestPath">The path requested by the request </param>
            <returns>The translated and filtered filesystem path used to identify the file resource</returns>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.UpstreamServers">
            <summary>
            A table of known upstream servers/ports that can be trusted to proxy connections
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.OperationTimeout">
            <summary>
            A <see cref="T:System.TimeSpan"/> for how long a connection may remain open before all operations are cancelled
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.Log">
            <summary>
            Event log provider
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.EventProcessor.Redirects">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.SetRedirects(System.Collections.Generic.IEnumerable{VNLib.Net.Http.Redirect})">
            <summary>
            Initializes 301 redirects table from a collection of redirects
            </summary>
            <param name="redirs">A collection of redirects</param>
        </member>
        <member name="F:VNLib.Plugins.Essentials.EventProcessor.Sessions">
            <summary>
            An <see cref="T:VNLib.Plugins.Essentials.Sessions.ISessionProvider"/> that connects stateful sessions to 
            HTTP connections
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.SetSessionProvider(VNLib.Plugins.Essentials.Sessions.ISessionProvider)">
            <summary>
            Sets or resets the current <see cref="T:VNLib.Plugins.Essentials.Sessions.ISessionProvider"/>
            for all connections
            </summary>
            <param name="sp">The new <see cref="T:VNLib.Plugins.Essentials.Sessions.ISessionProvider"/></param>
        </member>
        <member name="F:VNLib.Plugins.Essentials.EventProcessor.Router">
            <summary>
            An <see cref="T:VNLib.Plugins.Essentials.Content.IPageRouter"/> to route files to be processed
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.SetPageRouter(VNLib.Plugins.Essentials.Content.IPageRouter)">
            <summary>
            Sets or resets the current <see cref="T:VNLib.Plugins.Essentials.Content.IPageRouter"/>
            for all connections
            </summary>
            <param name="router"><see cref="T:VNLib.Plugins.Essentials.Content.IPageRouter"/> to route incomming connections</param>
        </member>
        <member name="F:VNLib.Plugins.Essentials.EventProcessor.VirtualEndpoints">
            <summary>
            A "lookup table" that represents virtual endpoints to be processed when an
            incomming connection matches its path parameter
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.AddEndpoint(VNLib.Plugins.IEndpoint[])">
            <summary>
            Determines the endpoint type(s) and adds them to the endpoint store(s) as necessary
            </summary>
            <param name="endpoints">Params array of endpoints to add to the store</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.RemoveEndpoint(VNLib.Plugins.IEndpoint[])">
            <summary>
            Removes the specified endpoint from the virtual store and oauthendpoints if eneabled and found
            </summary>
            <param name="eps">A collection of endpoints to remove from the table</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.RemoveVirtualEndpoint(System.String[])">
            <summary>
            Stops listening for connections to the specified <see cref="T:VNLib.Plugins.IVirtualEndpoint`1"/> identified by its path
            </summary>
            <param name="paths">An array of endpoint paths to remove from the table</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.ClientConnectedAsync(VNLib.Net.Http.IHttpEvent)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.ProcessFile(VNLib.Net.Http.IHttpEvent,VNLib.Plugins.Essentials.FileProcessArgs@)">
            <summary>
            Accepts the entity to process a file for an the selected <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> 
            by user code and determines what file-system file to open and respond to the connection with.
            </summary>
            <param name="entity">The entity to process the file for</param>
            <param name="args">The selected <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> to determine what file to process</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.ErrorHandler(System.Net.HttpStatusCode,VNLib.Net.Http.IHttpEvent)">
            <summary>
            <para>
            When an error occurs and is handled by the library, this event is invoked 
            </para>
            <para>
            NOTE: This function must be thread-safe!
            </para>
            </summary>
            <param name="errorCode">The error code that was created during processing</param>
            <param name="entity">The active IHttpEvent representing the faulted request</param>
            <returns>A value indicating if the entity was proccsed by this call</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.ProcessVirtualAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            If virtual endpoints are enabled, checks for the existance of an 
            endpoint and attmepts to process that endpoint.
            </summary>
            <param name="entity">The http entity to proccess</param>
            <returns>The results to return to the file processor, or null of the entity requires further processing</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.RouteFileAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Determines the best <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> processing response for the given connection.
            Alternativley may respond to the entity directly.
            </summary>
            <param name="entity">The http entity to process</param>
            <returns>The results to return to the file processor, this method must return an argument</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.PreProcessEntityAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            For pre-processing a request entity before all endpoint lookups are performed
            </summary>
            <param name="entity">The http entity to process</param>
            <returns>The results to return to the file processor, or null of the entity requires further processing</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.PostProcessFile(VNLib.Plugins.Essentials.HttpEntity,VNLib.Plugins.Essentials.FileProcessArgs@)">
            <summary>
            Allows for post processing of a selected <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> for the given entity
            </summary>
            <param name="entity">The http entity to process</param>
            <param name="chosenRoutine">The selected file processing routine for the given request</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.FindResourceInRoot(System.String,System.Boolean,System.String@)">
            <summary>
            Finds the file specified by the request and the server root the user has requested.
            Determines if it exists, has permissions to access it, and allowed file attributes.
            Also finds default files and files without extensions
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.EventProcessor.FindResourceInRoot(System.String,System.String@)">
            <summary>
            Determines if a requested resource exists within the <see cref="T:VNLib.Plugins.Essentials.EventProcessor"/> and is allowed to be accessed.
            </summary>
            <param name="resourcePath">The path to the resource</param>
            <param name="path">An out parameter that is set to the absolute path to the existing and accessable resource</param>
            <returns>True if the resource exists and is allowed to be accessed</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.CollectionsExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.CollectionsExtensions.TryGetNonEmptyValue(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.String@)">
            <summary>
            Gets a value by the specified key if it exsits and the value is not null/empty
            </summary>
            <param name="dict"></param>
            <param name="key">Key associated with the value</param>
            <param name="value">Value associated with the key</param>
            <returns>True of the key is found and is not noll/empty, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.CollectionsExtensions.IsArgumentSet(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,System.ReadOnlySpan{System.Char})">
            <summary>
            Determines if an argument was set in a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> by comparing 
            the value stored at the key, to the type argument
            </summary>
            <param name="dict"></param>
            <param name="key">The argument's key</param>
            <param name="argument">The argument to compare against</param>
            <returns>
            True if the key was found, and the value at the key is equal to the type parameter. False if the key is null/empty, or the 
            value does not match the specified type
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.CollectionsExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions">
            <summary>
            Provides <see cref="T:VNLib.Net.Http.ConnectionInfo"/> extension methods
            for common use cases
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.NO_CACHE_RESPONSE_HEADER_VALUE">
            <summary>
            Cache-Control header value for disabling cache
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.LastModified(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Gets the <see cref="F:System.Net.HttpRequestHeader.IfModifiedSince"/> header value and converts its value to a datetime value
            </summary>
            <returns>The if modified-since header date-time, null if the header was not set or the value was invalid</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.LastModified(VNLib.Net.Http.IConnectionInfo,System.DateTimeOffset)">
            <summary>
            Sets the last-modified response header value
            </summary>
            <param name="server"></param>
            <param name="value">Time the entity was last modified</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsCors(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Is the connection requesting cors
            </summary>
            <returns>true if the user-agent specified the cors security header</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsCrossSite(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Determines if the User-Agent specified "cross-site" in the Sec-Site header, OR 
            the connection spcified an origin header and the origin's host does not match the 
            requested host
            </summary>
            <returns>true if the request originated from a site other than the current one</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsUserInvoked(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Is the connection user-agent created, or automatic
            </summary>
            <param name="server"></param>
            <returns>true if sec-user header was set to "?1"</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsNavigation(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Was this request created from normal user navigation
            </summary>
            <returns>true if sec-mode set to "navigate"</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.NoCache(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Determines if the client specified "no-cache" for the cache control header, signalling they do not wish to cache the entity
            </summary>
            <returns>True if <see cref="F:System.Net.HttpRequestHeader.CacheControl"/> contains the string "no-cache", false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.SetCache(VNLib.Net.Http.IConnectionInfo,VNLib.Net.Http.CacheType,System.TimeSpan)">
            <summary>
            Sets the response cache headers to match the requested caching type. Does not check against request headers
            </summary>
            <param name="server"></param>
            <param name="type">One or more <see cref="T:VNLib.Net.Http.CacheType"/> flags that identify the way the entity can be cached</param>
            <param name="maxAge">The max age the entity is valid for</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.SetNoCache(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Sets the Cache-Control response header to <see cref="F:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.NO_CACHE_RESPONSE_HEADER_VALUE"/>
            and the pragma response header to 'no-cache'
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.EnpointPortsMatch(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Gets a value indicating whether the port number in the request is equivalent to the port number 
            on the local server. 
            </summary>
            <returns>True if the port number in the <see cref="P:VNLib.Net.Http.ConnectionInfo.RequestUri"/> matches the 
            <see cref="P:VNLib.Net.Http.ConnectionInfo.LocalEndpoint"/> port false if they do not match
            </returns>
            <remarks>
            Users should call this method to help prevent port based attacks if your
            code relies on the port number of the <see cref="P:VNLib.Net.Http.ConnectionInfo.RequestUri"/>
            </remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.RefererMatch(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Determines if the host of the current request URI matches the referer header host
            </summary>
            <returns>True if the request host and the referer host paremeters match, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.ExpireCookie(VNLib.Net.Http.IConnectionInfo,System.String,System.String,System.String,VNLib.Net.Http.CookieSameSite,System.Boolean)">
            <summary>
            Expires a client's cookie
            </summary>
            <param name="server"></param>
            <param name="name"></param>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="sameSite"></param>
            <param name="secure"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.SetSessionCookie(VNLib.Net.Http.IConnectionInfo,System.String,System.String,System.String,System.String,VNLib.Net.Http.CookieSameSite,System.Boolean,System.Boolean)">
            <summary>
            Sets a cookie with an infinite (session life-span)
            </summary>
            <param name="server"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="sameSite"></param>
            <param name="httpOnly"></param>
            <param name="secure"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.SetCookie(VNLib.Net.Http.IConnectionInfo,System.String,System.String,System.TimeSpan,System.String,System.String,VNLib.Net.Http.CookieSameSite,System.Boolean,System.Boolean)">
            <summary>
            Sets a cookie with an infinite (session life-span)
            </summary>
            <param name="server"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="sameSite"></param>
            <param name="httpOnly"></param>
            <param name="secure"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsBrowser(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Is the current connection a "browser" ?
            </summary>
            <param name="server"></param>
            <returns>true if the user agent string contains "Mozilla" and does not contain "bot", false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsLoopBack(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Determines if the current connection is the loopback/internal network adapter
            </summary>
            <param name="server"></param>
            <returns>True of the connection was made from the local machine</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.DNT(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Did the connection set the dnt header?
            </summary>
            <returns>true if the connection specified the dnt header, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsBehindUpstreamServer(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Determins if the current connection is behind a trusted upstream server
            </summary>
            <param name="server"></param>
            <returns>True if the connection came from a trusted upstream server, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.GetTrustedIp(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Gets the real IP address of the request if behind a trusted upstream server, otherwise returns the transport remote ip address
            </summary>
            <param name="server"></param>
            <returns>The real ip of the connection</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.GetTrustedIp(VNLib.Net.Http.IConnectionInfo,System.Boolean)">
            <summary>
            Gets the real IP address of the request if behind a trusted upstream server, otherwise returns the transport remote ip address
            </summary>
            <param name="server"></param>
            <param name="isTrusted"></param>
            <returns>The real ip of the connection</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsSecure(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Gets a value that determines if the connection is using tls, locally 
            or behind a trusted upstream server that is using tls.
            </summary>
            <param name="server"></param>
            <returns>True if the connection is secure, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.IsLocalConnection(VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Was the connection made on a local network to the server? NOTE: Use with caution
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.IConnectionInfoExtensions.GetCookie(VNLib.Net.Http.IConnectionInfo,System.String,System.String@)">
            <summary>
            Get a cookie from the current request
            </summary>
            <param name="server"></param>
            <param name="name">Name/ID of cookie</param>
            <param name="cookieValue">Is set to cookie if found, or null if not</param>
            <returns>True if cookie exists and was retrieved</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions">
            <summary>
            Provides extension methods for manipulating <see cref="T:VNLib.Net.Http.HttpEvent"/>s
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseJson``1(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,``0)">
            <summary>
            Attempts to serialize the JSON object (with default SR_OPTIONS) to binary and configure the response for a JSON message body
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ev"></param>
            <param name="code">The <see cref="T:System.Net.HttpStatusCode"/> result of the connection</param>
            <param name="response">The JSON object to serialzie and send as response body</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseJson``1(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Attempts to serialize the JSON object to binary and configure the response for a JSON message body
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ev"></param>
            <param name="code">The <see cref="T:System.Net.HttpStatusCode"/> result of the connection</param>
            <param name="response">The JSON object to serialzie and send as response body</param>
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use during serialization</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseJson(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.Object,System.Type)">
            <summary>
            Attempts to serialize the JSON object to binary and configure the response for a JSON message body
            </summary>
            <param name="ev"></param>
            <param name="code">The <see cref="T:System.Net.HttpStatusCode"/> result of the connection</param>
            <param name="response">The JSON object to serialzie and send as response body</param>
            <param name="type">The type to use during de-serialization</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseJson(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Attempts to serialize the JSON object to binary and configure the response for a JSON message body
            </summary>
            <param name="ev"></param>
            <param name="code">The <see cref="T:System.Net.HttpStatusCode"/> result of the connection</param>
            <param name="response">The JSON object to serialzie and send as response body</param>
            <param name="type">The type to use during de-serialization</param>
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use during serialization</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseJson(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.Text.Json.JsonDocument)">
            <summary>
            Writes the <see cref="T:System.Text.Json.JsonDocument"/> data to a temporary buffer and sets it as the response
            </summary>
            <param name="ev"></param>
            <param name="code">The <see cref="T:System.Net.HttpStatusCode"/> result of the connection</param>
            <param name="data">The <see cref="T:System.Text.Json.JsonDocument"/> data to send to client</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponse``1(VNLib.Plugins.Essentials.HttpEntity,``0)">
            <summary>
            Close as response to a client with an <see cref="F:System.Net.HttpStatusCode.OK"/> and serializes a <see cref="T:VNLib.Plugins.WebMessage"/> as the message response
            </summary>
            <param name="ev"></param>
            <param name="webm">The <see cref="T:VNLib.Plugins.WebMessage"/> to serialize and response to client with</param>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseAttachment(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.IO.FileInfo)">
            <summary>
            Close a response to a connection with a file as an attachment (set content dispostion)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="file">The <see cref="T:System.IO.FileInfo"/> of the desired file to attach</param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseAttachment(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.IO.FileStream)">
            <summary>
            Close a response to a connection with a file as an attachment (set content dispostion)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="file">The <see cref="T:System.IO.FileStream"/> of the desired file to attach</param>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseAttachment(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,VNLib.Plugins.Essentials.Storage.Blob)">
            <summary>
            Close a response to a connection with a file as an attachment (set content dispostion)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="blob">The <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> of the desired file to attach</param>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponseAttachment(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,VNLib.Net.ContentType,System.IO.Stream,System.String)">
            <summary>
            Close a response to a connection with a file as an attachment (set content dispostion)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="data">The data to straem to the client as an attatcment</param>
            <param name="ct">The <see cref="T:VNLib.Net.ContentType"/> that represents the file</param>
            <param name="fileName">The name of the file to attach</param>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponse(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.IO.FileInfo)">
            <summary>
            Close a response to a connection with a file as the entire response body (not attachment)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="file">The <see cref="T:System.IO.FileInfo"/> of the desired file to attach</param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponse(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.IO.FileStream)">
            <summary>
            Close a response to a connection with a <see cref="T:System.IO.FileStream"/>  as the entire response body (not attachment)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="file">The <see cref="T:System.IO.FileStream"/> of the desired file to attach</param>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponse(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,VNLib.Plugins.Essentials.Storage.Blob)">
            <summary>
            Close a response to a connection with a <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> as the entire response body (not attachment)
            </summary>
            <param name="ev"></param>
            <param name="code">Status code</param>
            <param name="blob">The <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> of the desired file to attach</param>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponse(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,VNLib.Net.ContentType,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Close a response to a connection with a character buffer using the server wide
            <see cref="P:VNLib.Net.Http.ConnectionInfo.Encoding"/> encoding
            </summary>
            <param name="ev"></param>
            <param name="code">The response status code</param>
            <param name="type">The <see cref="T:VNLib.Net.ContentType"/> the data represents</param>
            <param name="data">The character buffer to send</param>
            <remarks>This method will store an encoded copy as a memory stream, so be careful with large buffers</remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseResponse(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,VNLib.Net.ContentType,System.ReadOnlySpan{System.Char}@,System.Text.Encoding)">
            <summary>
            Close a response to a connection with a character buffer using the specified encoding type
            </summary>
            <param name="ev"></param>
            <param name="code">The response status code</param>
            <param name="type">The <see cref="T:VNLib.Net.ContentType"/> the data represents</param>
            <param name="data">The character buffer to send</param>
            <param name="encoding">The encoding type to use when converting the buffer</param>
            <remarks>This method will store an encoded copy as a memory stream, so be careful with large buffers</remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.CloseWithRelativeFile(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,System.String)">
            <summary>
            Close a response to a connection with a relative file within the current root's directory
            </summary>
            <param name="entity"></param>
            <param name="code">The status code to set the response as</param>
            <param name="filePath">The path of the relative file to send</param>
            <returns>True if the file was found, false if the file does not exist or cannot be accessed</returns>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.Redirect(VNLib.Plugins.Essentials.HttpEntity,VNLib.Plugins.Essentials.Extensions.RedirectType,System.String)">
            <summary>
            Redirects a client using the specified <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/>
            </summary>
            <param name="ev"></param>
            <param name="type">The <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/> redirection type</param>
            <param name="location">Location to direct client to, sets the "Location" header</param>
            <remarks>Sets required headers for redirection, disables cache control, and returns the status code to the client</remarks>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.Redirect(VNLib.Plugins.Essentials.HttpEntity,VNLib.Plugins.Essentials.Extensions.RedirectType,System.Uri)">
            <summary>
            Redirects a client using the specified <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/>
            </summary>
            <param name="ev"></param>
            <param name="type">The <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/> redirection type</param>
            <param name="location">Location to direct client to, sets the "Location" header</param>
            <remarks>Sets required headers for redirection, disables cache control, and returns the status code to the client</remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.Redirect(VNLib.Net.Http.IHttpEvent,VNLib.Plugins.Essentials.Extensions.RedirectType,System.String)">
            <summary>
            Redirects a client using the specified <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/>
            </summary>
            <param name="ev"></param>
            <param name="type">The <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/> redirection type</param>
            <param name="location">Location to direct client to, sets the "Location" header</param>
            <remarks>Sets required headers for redirection, disables cache control, and returns the status code to the client</remarks>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.Redirect(VNLib.Net.Http.IHttpEvent,VNLib.Plugins.Essentials.Extensions.RedirectType,System.Uri)">
            <summary>
            Redirects a client using the specified <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/>
            </summary>
            <param name="ev"></param>
            <param name="type">The <see cref="T:VNLib.Plugins.Essentials.Extensions.RedirectType"/> redirection type</param>
            <param name="location">Location to direct client to, sets the "Location" header</param>
            <remarks>Sets required headers for redirection, disables cache control, and returns the status code to the client</remarks>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.TryGetJsonFromArg``1(VNLib.Plugins.Essentials.HttpEntity,System.String,``0@)">
            <summary>
            Attempts to read and deserialize a JSON object from the reqeust body (form data or urlencoded)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ev"></param>
            <param name="key">Request argument key (name)</param>
            <param name="obj"></param>
            <returns>true if the argument was found and successfully converted to json</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.TryGetJsonFromArg``1(VNLib.Plugins.Essentials.HttpEntity,System.String,System.Text.Json.JsonSerializerOptions,``0@)">
            <summary>
            Attempts to read and deserialize a JSON object from the reqeust body (form data or urlencoded)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ev"></param>
            <param name="key">Request argument key (name)</param>
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use during deserialization </param>
            <param name="obj"></param>
            <returns>true if the argument was found and successfully converted to json</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.GetJsonFromArg(VNLib.Plugins.Essentials.HttpEntity,System.String,System.Text.Json.JsonDocumentOptions@)">
            <summary>
            Reads the value stored at the key location in the request body arguments, into a <see cref="T:System.Text.Json.JsonDocument"/>
            </summary>
            <param name="ev"></param>
            <param name="key">Request argument key (name)</param>
            <param name="options"><see cref="T:System.Text.Json.JsonDocumentOptions"/> to use during parsing</param>
            <returns>A new <see cref="T:System.Text.Json.JsonDocument"/> if the key is found, null otherwise</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.GetJsonFromFile``1(VNLib.Plugins.Essentials.HttpEntity,System.Text.Json.JsonSerializerOptions,System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) and the file is <see cref="F:VNLib.Net.ContentType.Json"/>
            file. It will be deserialzied to the specified object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ev"></param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use during deserialization </param>
            <returns>Returns the deserialized object if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.GetJsonFromFile(VNLib.Plugins.Essentials.HttpEntity,System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) and the file is <see cref="F:VNLib.Net.ContentType.Json"/>
            file. It will be parsed into a new <see cref="T:System.Text.Json.JsonDocument"/>
            </summary>
            <param name="ev"></param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <returns>Returns the parsed <see cref="T:System.Text.Json.JsonDocument"/>if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.GetJsonFromFileAsync``1(VNLib.Plugins.Essentials.HttpEntity,System.Text.Json.JsonSerializerOptions,System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) and the file is <see cref="F:VNLib.Net.ContentType.Json"/>
            file. It will be deserialzied to the specified object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ev"></param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <param name="options"><see cref="T:System.Text.Json.JsonSerializerOptions"/> to use during deserialization </param>
            <returns>The deserialized object if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.GetJsonFromFileAsync(VNLib.Plugins.Essentials.HttpEntity,System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) and the file is <see cref="F:VNLib.Net.ContentType.Json"/>
            file. It will be parsed into a new <see cref="T:System.Text.Json.JsonDocument"/>
            </summary>
            <param name="ev"></param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <returns>Returns the parsed <see cref="T:System.Text.Json.JsonDocument"/>if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.ParseFileAsAsync``1(VNLib.Plugins.Essentials.HttpEntity,System.Func{System.IO.Stream,System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) the specified parser will be called to parse the 
            content body asynchronously into a .net object or its default if no attachments are included
            </summary>
            <param name="ev"></param>
            <param name="parser">A function to asynchronously parse the entity body into its object representation</param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <returns>Returns the parsed <typeparamref name="T"/> if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.ParseFileAsAsync``1(VNLib.Plugins.Essentials.HttpEntity,System.Func{System.IO.Stream,System.String,System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) the specified parser will be called to parse the 
            content body asynchronously into a .net object or its default if no attachments are included
            </summary>
            <param name="ev"></param>
            <param name="parser">A function to asynchronously parse the entity body into its object representation</param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <returns>Returns the parsed <typeparamref name="T"/> if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.ParseFileAsAsync``1(VNLib.Plugins.Essentials.HttpEntity,System.Func{System.IO.Stream,System.Threading.Tasks.ValueTask{``0}},System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) the specified parser will be called to parse the 
            content body asynchronously into a .net object or its default if no attachments are included
            </summary>
            <param name="ev"></param>
            <param name="parser">A function to asynchronously parse the entity body into its object representation</param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <returns>Returns the parsed <typeparamref name="T"/> if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.ParseFileAsAsync``1(VNLib.Plugins.Essentials.HttpEntity,System.Func{System.IO.Stream,System.String,System.Threading.Tasks.ValueTask{``0}},System.Int32)">
            <summary>
            If there are file attachements (form data files or content body) the specified parser will be called to parse the 
            content body asynchronously into a .net object or its default if no attachments are included
            </summary>
            <param name="ev"></param>
            <param name="parser">A function to asynchronously parse the entity body into its object representation</param>
            <param name="uploadIndex">The index within <see cref="P:VNLib.Plugins.Essentials.HttpEntity.Files"/></param> list of the file to read
            <returns>Returns the parsed <typeparamref name="T"/> if found, default otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.HasAuthorization(VNLib.Net.Http.IConnectionInfo,System.String@)">
            <summary>
            Gets the bearer token from an authorization header
            </summary>
            <param name="ci"></param>
            <param name="token">The token stored in the user's authorization header</param>
            <returns>True if the authorization header was set, has a Bearer token value</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.GetRootDir(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Get a <see cref="T:System.IO.DirectoryInfo"/> instance that points to the current sites filesystem root.
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.ContentTypeString(VNLib.Net.FileUpload@)">
            <summary>
            Returns the MIME string representation of the content type of the uploaded file.
            </summary>
            <param name="upload"></param>
            <returns>The MIME string representation of the content type of the uploaded file.</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.AcceptWebSocket(VNLib.Plugins.Essentials.HttpEntity,VNLib.Plugins.Essentials.WebsocketAcceptedCallback,System.Object,System.String)">
            <summary>
            Attemts to upgrade the connection to a websocket, if the setup fails, it sets up the response to the client accordingly.
            </summary>
            <param name="entity"></param>
            <param name="socketOpenedcallback">A delegate that will be invoked when the websocket has been opened by the framework</param>
            <param name="subProtocol">The sub-protocol to use on the current websocket</param>
            <param name="userState">An object to store in the <see cref="P:VNLib.Plugins.Essentials.WebSocketSession.UserState"/> property when the websocket has been accepted</param>
            <returns>True if operation succeeds.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.EssentialHttpEventExtensions.AcceptWebSocket(VNLib.Net.Http.IHttpEvent,VNLib.Plugins.Essentials.WebsocketAcceptedCallback,System.Object,System.String)">
            <summary>
            Attemts to upgrade the connection to a websocket, if the setup fails, it sets up the response to the client accordingly.
            </summary>
            <param name="entity"></param>
            <param name="socketOpenedcallback">A delegate that will be invoked when the websocket has been opened by the framework</param>
            <param name="subProtocol">The sub-protocol to use on the current websocket</param>
            <param name="userState">An object to store in the <see cref="P:VNLib.Plugins.Essentials.WebSocketSession.UserState"/> property when the websocket has been accepted</param>
            <returns>True if operation succeeds.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException">
            <summary>
            Wraps a <see cref="T:System.Text.Json.JsonException"/> that is thrown when a JSON request message
            was unsuccessfully parsed.
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException.#ctor(System.Text.Json.JsonException)">
            <summary>
            Creates a new <see cref="T:VNLib.Plugins.Essentials.Extensions.InvalidJsonRequestException"/> wrapper from a base <see cref="T:System.Text.Json.JsonException"/>
            </summary>
            <param name="baseExp"></param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.RedirectType">
            <summary>
            Shortened list of <see cref="T:System.Net.HttpStatusCode"/>s for redirecting connections
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.UserExtensions">
            <summary>
            Provides extension methods to the Users namespace
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.UserExtensions.SetProfile(VNLib.Plugins.Essentials.Users.IUser,VNLib.Plugins.Essentials.Accounts.AccountData)">
            <summary>
            Stores the user's profile to their entry. 
            <br/>
            NOTE: You must validate/filter data before storing
            </summary>
            <param name="ud"></param>
            <param name="profile">The profile object to store on account</param>
            <exception cref="T:System.Text.Json.JsonException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.UserExtensions.SetProfile(VNLib.Plugins.Essentials.Users.IUser,System.String)">
            <summary>
            Stores the serialized string user's profile to their entry.
            <br/>
            NOTE: No data validation checks are performed
            </summary>
            <param name="ud"></param>
            <param name="jsonProfile">The JSON serialized "raw" profile data</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.UserExtensions.GetProfile(VNLib.Plugins.Essentials.Users.IUser)">
            <summary>
            Recovers the user's stored profile
            </summary> 
            <returns>The user's profile stored in the entry or null if no entry is found</returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Extensions.DbExtensions">
            <summary>
            Provides basic extension methods for ADO.NET abstract classes
            for rapid development
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.AddParameter``1(System.Data.Common.DbCommand,System.String,``0,System.Data.DbType,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbParameter"/> configured for <see cref="F:System.Data.ParameterDirection.Input"/> with the specified value
            and adds it to the command.
            </summary>
            <param name="cmd"></param>
            <param name="name">The parameter name</param>
            <param name="value">The value of the parameter</param>
            <param name="type">The <see cref="T:System.Data.DbType"/> of the column</param>
            <param name="nullable">Are null types allowed in the value parameter</param>
            <returns>The created parameter</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.AddParameter``1(System.Data.Common.DbCommand,System.String,``0,System.Data.DbType,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbParameter"/> configured for <see cref="F:System.Data.ParameterDirection.Input"/> with the specified value
            and adds it to the command.
            </summary>
            <param name="cmd"></param>
            <param name="name">The parameter name</param>
            <param name="value">The value of the parameter</param>
            <param name="type">The <see cref="T:System.Data.DbType"/> of the column</param>
            <param name="size">Size of the data value</param>
            <param name="nullable">Are null types allowed in the value parameter</param>
            <returns>The created parameter</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.AddOutParameter``1(System.Data.Common.DbCommand,System.String,``0,System.Data.DbType,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbParameter"/> configured for <see cref="F:System.Data.ParameterDirection.Output"/> with the specified value
            and adds it to the command.
            </summary>
            <param name="cmd"></param>
            <param name="name">The parameter name</param>
            <param name="value">The value of the parameter</param>
            <param name="type">The <see cref="T:System.Data.DbType"/> of the column</param>
            <param name="nullable">Are null types allowed in the value parameter</param>
            <returns>The created parameter</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.AddOutParameter``1(System.Data.Common.DbCommand,System.String,``0,System.Data.DbType,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbParameter"/> configured for <see cref="F:System.Data.ParameterDirection.Output"/> with the specified value
            and adds it to the command.
            </summary>
            <param name="cmd"></param>
            <param name="name">The parameter name</param>
            <param name="value">The value of the parameter</param>
            <param name="type">The <see cref="T:System.Data.DbType"/> of the column</param>
            <param name="size">Size of the data value</param>
            <param name="nullable">Are null types allowed in the value parameter</param>
            <returns>The created parameter</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.CreateTextCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbCommand"/> for <see cref="F:System.Data.CommandType.Text"/> with the specified command
            </summary>
            <param name="db"></param>
            <param name="cmdText">The command to run against the connection</param>
            <returns>The initalized <see cref="T:System.Data.Common.DbCommand"/></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.CreateProcedureCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbCommand"/> for <see cref="F:System.Data.CommandType.StoredProcedure"/> with the specified procedure name
            </summary>
            <param name="db"></param>
            <param name="procedureName">The name of the stored proecedure to execute</param>
            <returns>The initalized <see cref="T:System.Data.Common.DbCommand"/></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.CreateTextCommand(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbCommand"/> for <see cref="F:System.Data.CommandType.Text"/> with the specified command 
            on a given transaction
            </summary>
            <param name="db"></param>
            <param name="cmdText">The command to run against the connection</param>
            <param name="transaction">The transaction to execute on</param>
            <returns>The initalized <see cref="T:System.Data.Common.DbCommand"/></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.CreateCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Shortcut to create a command on a transaction with the specifed command type and command
            </summary>
            <param name="db"></param>
            <param name="transaction">The transaction to complete the operation on</param>
            <param name="type">The command type</param>
            <param name="command">The command to execute</param>
            <returns>The intialized db command</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.CreateProcedureCommand(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Creates a new <see cref="T:System.Data.Common.DbCommand"/> for <see cref="F:System.Data.CommandType.StoredProcedure"/> with the specified procedure name
            </summary>
            <param name="db"></param>
            <param name="procedureName">The name of the stored proecedure to execute</param>
            <param name="transaction">The transaction to execute on</param>
            <returns>The initalized <see cref="T:System.Data.Common.DbCommand"/></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.GetAllObjects``1(System.Data.Common.DbDataReader,System.Collections.Generic.ICollection{``0})">
            <summary>
            Reads all available rows from the reader, adapts columns to public properties with <see cref="T:VNLib.Plugins.Essentials.Sql.SqlColumnName"/>
            attributes, and adds them to the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="container">The container to write created objects to</param>
            <returns>The number of objects created and written to the collection</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.GetAllObjectsAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.ICollection{``0})">
            <summary>
            Reads all available rows from the reader, adapts columns to public properties with <see cref="T:VNLib.Plugins.Essentials.Sql.SqlColumnName"/>
            attributes, and adds them to the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="container">The container to write created objects to</param>
            <returns>The number of objects created and written to the collection</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.GetFirstObject``1(System.Data.Common.DbDataReader)">
            <summary>
            Reads the first available row from the reader, adapts columns to public properties with <see cref="T:VNLib.Plugins.Essentials.Sql.SqlColumnName"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns>The created object, or default if no rows are available</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.GetFirstObjectAsync``1(System.Data.Common.DbDataReader)">
            <summary>
            Reads the first available row from the reader, adapts columns to public properties with <see cref="T:VNLib.Plugins.Essentials.Sql.SqlColumnName"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns>The created object, or default if no rows are available</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.ExecuteNonQuery``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes a nonquery operation with the specified command using the object properties set with the 
            <see cref="T:VNLib.Plugins.Essentials.Sql.SqlVariable"/> attributes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="obj">The object containing the <see cref="T:VNLib.Plugins.Essentials.Sql.SqlVariable"/> properties to write to command variables</param>
            <returns>The number of rows affected</returns>
            <exception cref="T:System.TypeLoadException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Extensions.DbExtensions.ExecuteNonQueryAsync``1(System.Data.Common.DbCommand,``0)">
            <summary>
            Executes a nonquery operation with the specified command using the object properties set with the 
            <see cref="T:VNLib.Plugins.Essentials.Sql.SqlVariable"/> attributes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="obj">The object containing the <see cref="T:VNLib.Plugins.Essentials.Sql.SqlVariable"/> properties to write to command variables</param>
            <returns>The number of rows affected</returns>
            <exception cref="T:System.TypeLoadException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.FpRoutine">
            <summary>
            Server routine to follow after processing selector 
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.Error">
            <summary>
            There was an error during processing and the server should immediatly respond with a <see cref="F:System.Net.HttpStatusCode.InternalServerError"/> error code
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.Continue">
            <summary>
            The server should continue the file read operation with the current information
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.Redirect">
            <summary>
            The server should redirect the conneciton to an alternate location
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.Deny">
            <summary>
            The server should immediatly respond with a <see cref="F:System.Net.HttpStatusCode.Forbidden"/> error code
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.ServeOther">
            <summary>
            The server should fulfill the reqeest by sending the contents of an alternate file location (if it exists) with the existing connection
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.NotFound">
            <summary>
            The server should immediatly respond with a <see cref="F:System.Net.HttpStatusCode.NotFound"/> error code
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.ServeOtherFQ">
            <summary>
            Serves another file location that must be a trusted fully qualified location
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FpRoutine.VirtualSkip">
            <summary>
            The connection does not require a file to be processed
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.FileProcessArgs">
            <summary>
            Specifies operations the file processor will follow during request handling
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FileProcessArgs.Deny">
            <summary>
            Signals the file processor should complete with a <see cref="F:VNLib.Plugins.Essentials.FpRoutine.Deny"/> routine
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FileProcessArgs.Continue">
            <summary>
            Signals the file processor should continue with intended/normal processing of the request
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FileProcessArgs.Error">
            <summary>
            Signals the file processor should complete with a <see cref="F:VNLib.Plugins.Essentials.FpRoutine.Error"/> routine
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FileProcessArgs.NotFound">
            <summary>
            Signals the file processor should complete with a <see cref="F:VNLib.Plugins.Essentials.FpRoutine.NotFound"/> routine
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.FileProcessArgs.VirtualSkip">
            <summary>
            Signals the file processor should not process the connection
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.FileProcessArgs.Routine">
            <summary>
            The routine the file processor should execute
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.FileProcessArgs.Alternate">
            <summary>
            An optional alternate path for the given routine
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.#ctor(VNLib.Plugins.Essentials.FpRoutine)">
            <summary>
            Initializes a new <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> with the specified routine
            and empty <see cref="P:VNLib.Plugins.Essentials.FileProcessArgs.Alternate"/> path
            </summary>
            <param name="routine">The file processing routine to execute</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.#ctor(VNLib.Plugins.Essentials.FpRoutine,System.String)">
            <summary>
            Initializes a new <see cref="T:VNLib.Plugins.Essentials.FileProcessArgs"/> with the specified routine
            and alternate path
            </summary>
            <param name="routine"></param>
            <param name="alternatePath"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.op_Equality(VNLib.Plugins.Essentials.FileProcessArgs,VNLib.Plugins.Essentials.FileProcessArgs)">
            <summary>
            
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.op_Inequality(VNLib.Plugins.Essentials.FileProcessArgs,VNLib.Plugins.Essentials.FileProcessArgs)">
            <summary>
            
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.Equals(VNLib.Plugins.Essentials.FileProcessArgs)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.FileProcessArgs.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.HttpEntity">
            <summary>
            A container for an <see cref="T:VNLib.Net.Http.HttpEvent"/> with its attached session
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.EventCancellation">
            <summary>
            A token that has a scheduled timeout to signal the cancellation of the entity event
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.Entity">
            <summary>
            The connection event entity
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.Session">
            <summary>
            The session assocaited with the event
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.IsBehindUpstreamServer">
            <summary>
            A value that indicates if the connecion came from a trusted upstream server
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.IsLocalConnection">
            <summary>
            Determines if the connection came from the local network to the current server
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.IsSecure">
            <summary>
            Gets a value that determines if the connection is using tls, locally 
            or behind a trusted upstream server that is using tls.
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.HttpEntity.Server">
            <summary>
            The connection info object assocated with the entity
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.TrustedRemoteIp">
            <summary>
            User's ip. If the connection is behind a local proxy, returns the users actual IP. Otherwise returns the connection ip. 
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.HttpEntity.RequestedRoot">
            <summary>
            The requested web root. Provides additional site information
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.HttpEntity.QueryArgs">
            <summary>
            If the request has query arguments they are stored in key value format
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.HttpEntity.RequestArgs">
            <summary>
            If the request body has form data or url encoded arguments they are stored in key value format
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.HttpEntity.Files">
            <summary>
            Contains all files upladed with current request
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.HttpEntity.CloseResponse(System.Net.HttpStatusCode)">
            <summary>
            Complete the session and respond to user
            </summary>
            <param name="code">Status code of operation</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.HttpEntity.CloseResponse(System.Net.HttpStatusCode,VNLib.Net.ContentType,System.IO.Stream)">
            <summary>
            Responds to a client with a <see cref="T:System.IO.Stream"/> containing data to be sent to user of a given contentType.
            Runtime will dispose of the stream during closing event
            </summary>
            <param name="code">Response status code</param>
            <param name="type">MIME ContentType of data</param>
            <param name="stream">Data to be sent to client</param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:VNLib.Net.Http.ContentTypeUnacceptableException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Oauth.IOAuth2Provider">
            <summary>
            An interface that Oauth2 serice providers must implement 
            to provide sessions to an <see cref="T:VNLib.Plugins.Essentials.EventProcessor"/>
            processor endpoint processor
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Oauth.IOAuth2Provider.MaxTokenLifetime">
            <summary>
            Gets a value indicating how long a session may be valid for
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Oauth.O2EndpointBase">
            <summary>
            An base class for HttpEntity processors (endpoints) for processing
            Oauth2 client requests. Similar to <seealso cref="T:VNLib.Plugins.Essentials.ProtectedWebEndpoint"/>
            but for Oauth2 sessions
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Oauth.O2EndpointBase.EndpointProtectionSettings">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.O2EndpointBase.Process(VNLib.Plugins.Essentials.HttpEntity)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.O2EndpointBase.PreProccess(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Runs base pre-processing and ensures "sessions" OAuth2 token
            session is loaded
            </summary>
            <param name="entity">The request entity to process</param>
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Oauth.ErrorType">
            <summary>
            An OAuth2 specification error code
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.InvalidRequest">
            <summary>
            The request is considered invalid and cannot be continued
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.InvalidClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.InvalidToken">
            <summary>
            The supplied token is no longer considered valid
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.UnauthorizedClient">
            <summary>
            The token does not have the authorization required, is missing authorization, or is no longer considered acceptable
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.UnsupportedResponseType">
            <summary>
            The client accept content type is unacceptable for the requested endpoint and cannot be processed
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.InvalidScope">
            <summary>
            The scope of the token does not allow for this operation
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.ServerError">
            <summary>
            There was a server related error and the request could not be fulfilled 
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Oauth.ErrorType.TemporarilyUnabavailable">
            <summary>
            The request could not be processed at this time
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthHttpExtensions.CloseResponseError(VNLib.Plugins.Essentials.HttpEntity,System.Net.HttpStatusCode,VNLib.Plugins.Essentials.Oauth.ErrorType,System.String)">
            <summary>
            Closes the current response with a json error message with the message details
            </summary>
            <param name="ev"></param>
            <param name="code">The http status code</param>
            <param name="error">The short error</param>
            <param name="description">The error description message</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthHttpExtensions.CloseResponseError(VNLib.Net.Http.IHttpEvent,System.Net.HttpStatusCode,VNLib.Plugins.Essentials.Oauth.ErrorType,System.String)">
            <summary>
            Closes the current response with a json error message with the message details
            </summary>
            <param name="ev"></param>
            <param name="code">The http status code</param>
            <param name="error">The short error</param>
            <param name="description">The error description message</param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Oauth.OauthSessionCacheExhaustedException">
            <summary>
            Raised when the session cache space has been exhausted and cannot 
            load the new session into cache.
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions">
            <summary>
            Represents an active oauth session
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions.AppID(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            The ID of the application that granted the this token access
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions.RefreshToken(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            The refresh token for this current token
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions.Scopes(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            The token's privilage scope
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions.Type(VNLib.Plugins.Essentials.Sessions.SessionInfo@)">
            <summary>
            The Oauth2 token type
            </summary>,
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions.HasScope(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.String,System.String)">
            <summary>
            Determines if the current session has the required scope type and the 
            specified permission
            </summary>
            <param name="session"></param>
            <param name="type">The scope type</param>
            <param name="permission">The scope permission</param>
            <returns>True if the current session has the required scope, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Oauth.OauthSessionExtensions.HasScope(VNLib.Plugins.Essentials.Sessions.SessionInfo@,System.ReadOnlySpan{System.Char})">
            <summary>
            Determines if the current session has the required scope type and the 
            specified permission
            </summary>
            <param name="session"></param>
            <param name="scope">The scope to compare</param>
            <returns>True if the current session has the required scope, false otherwise</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.ProtectedWebEndpoint">
            <summary>
            Implements <see cref="T:VNLib.Plugins.Essentials.UnprotectedWebEndpoint"/> to provide 
            authoriation checks before processing
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ProtectedWebEndpoint.PreProccess(VNLib.Plugins.Essentials.HttpEntity)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.ProtectionSettings">
            <summary>
            A structure containing a basic security protocol
            for connection pre-checks. Settings are the most 
            strict by default
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.TlsRequired">
            <summary>
            Requires TLS be enabled for all incomming requets (or loopback adapter)
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.SessionsRequired">
            <summary>
            Checks that sessions are enabled for incomming requests 
            and that they are not new sessions.
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.CrossSiteDenied">
            <summary>
            Allows connections that define cross-site sec headers
            to be processed or denied, (denied by default
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.RefererMatch">
            <summary>
            Enables referr match protection. Requires that if a referer header is
            set that it matches the current origin
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.BrowsersOnly">
            <summary>
            Requires all connections to have pass an IsBrowser() check
            (requires a valid user-agent header that contains Mozilla in
            the string)
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.VerifySessionCors">
            <summary>
            If the connection has a valid session, verifies that the 
            stored session origin matches the client's origin header. 
            (confirms the session is coming from the same origin it 
            was created on)
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ProtectionSettings.DisableCaching">
            <summary>
            Disables response caching, by setting the cache control headers appropriatly.
            Default is enabled
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ProtectionSettings.#ctor">
            <summary>
            Initalizes a new <see cref="T:VNLib.Plugins.Essentials.ProtectionSettings"/> with the most
            strict security settings unless overriden
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.ResourceEndpointBase">
            <summary>
            Provides a base class for implementing un-authenticated resource endpoints
            with basic (configurable) security checks
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.ResourceEndpointBase.EndpointProtectionSettings">
            <summary>
            Default protection settings. Protection settings are the most 
            secure by default, should be loosened an necessary
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.Process(VNLib.Plugins.Essentials.HttpEntity)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.PreProccess(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Allows for synchronous Pre-Processing of an entity. The result 
            will determine if the method processing methods will be invoked, or 
            a <see cref="F:VNLib.Plugins.VfReturnType.Forbidden"/> error code will be returned
            </summary>
            <param name="entity">The incomming request to process</param>
            <returns>
            True if processing should continue, false if the response should be 
            <see cref="F:VNLib.Plugins.VfReturnType.Forbidden"/>, less than 0 if entity was 
            responded to.
            </returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.PostAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming POST request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.GetAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming GET request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.DeleteAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming DELETE request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.PutAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming PUT request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.PatchAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming PATCH request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.AlternateMethodAsync(VNLib.Plugins.Essentials.HttpEntity,VNLib.Net.Http.HttpMethod)">
            <summary>
            Invoked when a request is received for a method other than GET, POST, DELETE, or PUT;
            </summary>
            <param name="entity">The entity that </param>
            <param name="method">The request method</param>
            <returns>The results of the processing</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.WebsocketRequestedAsync(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Invoked when the current endpoint received a websocket request
            </summary>
            <param name="entity">The entity that requested the websocket</param>
            <returns>The results of the operation</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.Post(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming POST request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.Get(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming GET request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.Delete(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming DELETE request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.Put(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming PUT request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.Patch(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            This method gets invoked when an incoming PATCH request to the endpoint has been requested.
            </summary>
            <param name="entity">The entity to be processed</param>
            <returns>The result of the operation to return to the file processor</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.AlternateMethod(VNLib.Plugins.Essentials.HttpEntity,VNLib.Net.Http.HttpMethod)">
            <summary>
            Invoked when a request is received for a method other than GET, POST, DELETE, or PUT;
            </summary>
            <param name="entity">The entity that </param>
            <param name="method">The request method</param>
            <returns>The results of the processing</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.ResourceEndpointBase.WebsocketRequested(VNLib.Plugins.Essentials.HttpEntity)">
            <summary>
            Invoked when the current endpoint received a websocket request
            </summary>
            <param name="entity">The entity that requested the websocket</param>
            <returns>The results of the operation</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.SessionType">
            <summary>
            Flags to specify <see cref="T:VNLib.Plugins.Essentials.Sessions.ISession"/> session types
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionType.Web">
            <summary>
            The session is a "basic" or web based session
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionType.OAuth2">
            <summary>
            The session is an OAuth2 session type
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.ISession">
            <summary>
            Represents a connection oriented session data
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.SessionType">
            <summary>
            A value specifying the type of the loaded session
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.Created">
            <summary>
            UTC time in when the session was created
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.Privilages">
            <summary>
            Privilages associated with user specified during login
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.SessionID">
            <summary>
            Key that identifies the current session. (Identical to cookie::sessionid)
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.UserID">
            <summary>
            User ID associated with session
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.ISession.Invalidate(System.Boolean)">
            <summary>
            Marks the session as invalid
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.Token">
            <summary>
            Gets or sets the session's authorization token
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.UserIP">
            <summary>
            The IP address belonging to the client
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.ISession.RegenID">
            <summary>
            Sets the session ID to be regenerated if applicable
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.ISession.IsNew">
            <summary>
            A value that indicates this session was newly created
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.ISessionExtensions.InitNewSession(VNLib.Plugins.Essentials.Sessions.ISession,VNLib.Net.Http.IConnectionInfo)">
            <summary>
            Initializes a "new" session with initial varaibles from the current connection
            for lookup/comparison later
            </summary>
            <param name="session"></param>
            <param name="ci">The <see cref="T:VNLib.Net.Http.ConnectionInfo"/> object containing connection details</param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.ISessionProvider">
            <summary>
            Provides stateful session objects assocated with HTTP connections
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.ISessionProvider.GetSessionAsync(VNLib.Net.Http.IHttpEvent,System.Threading.CancellationToken)">
            <summary>
            Gets a session handle for the current connection
            </summary>
            <param name="entity">The connection to get associated session on</param>
            <param name="cancellationToken"></param>
            <returns>A task the resolves an <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/> instance</returns>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Sessions.SessionException"></exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.SessionBase">
            <summary>
            Provides a base class for the <see cref="T:VNLib.Plugins.Essentials.Sessions.ISession"/> interface for exclusive use within a multithreaded
            context
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionBase.Flags">
            <summary>
            A <see cref="T:VNLib.Utils.BitField"/> of status flags for the state of the current session.
            May be used internally
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.IsModified">
            <summary>
            Gets or sets the Modified flag
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.Item(System.String)">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.UserIP">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.SessionType">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.SessionID">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.Created">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.Privilages">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.IsNew">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.UserID">
            <inheritdoc/>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.Token">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.Invalidate(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.RegenID">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.IndexerGet(System.String)">
            <summary>
            Invoked when the indexer is is called to 
            </summary>
            <param name="key">The key/index to get the value for</param>
            <returns>The value stored at the specified key</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.IndexerSet(System.String,System.String)">
            <summary>
            Sets a value requested by the indexer
            </summary>
            <param name="key">The key to associate the value with</param>
            <param name="value">The value to store</param>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionBase.VNLib#Utils#Memory#Caching#ICacheable#Expires">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.System#IEquatable{VNLib#Utils#Memory#Caching#ICacheable}#Equals(VNLib.Utils.Memory.Caching.ICacheable)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.Evicted">
            <summary>
            Invoked when the store caching this instance evicts the record.
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionBase.OnEvictedAsync">
            <summary>
            Invoked when exclusive access is granted. 
            </summary>
            <returns></returns>
            <remarks>
            NOTE: Method is executed in a background task, so exceptions should be caught.
            </remarks>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.SessionCacheLimitException">
            <summary>
            Raised when the maximum number of cache entires has been reached, and the new session cannot be processed
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.SessionException">
            <summary>
            A base class for all session exceptions
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.SessionHandle">
            <summary>
            A handle that holds exclusive access to a <see cref="T:VNLib.Plugins.Essentials.Sessions.ISession"/>
            session object
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionHandle.Empty">
            <summary>
            An empty <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/> instance. (A handle without a session object)
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionHandle.SessionData">
            <summary>
            The session data object associated with the current session
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionHandle.EntityStatus">
            <summary>
            A value indicating if the connection is valid and should continue to be processed
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.#ctor(VNLib.Plugins.Essentials.Sessions.ISession,VNLib.Plugins.Essentials.FileProcessArgs,VNLib.Plugins.Essentials.Sessions.SessionReleaseCallback)">
            <summary>
            Initializes a new <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/>
            </summary>
            <param name="sessionData">The session data instance</param>
            <param name="callback">A callback that is invoked when the handle is released</param>
            <param name="entityStatus"></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.#ctor(VNLib.Plugins.Essentials.Sessions.ISession,VNLib.Plugins.Essentials.Sessions.SessionReleaseCallback)">
            <summary>
            Initializes a new <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/>
            </summary>
            <param name="sessionData">The session data instance</param>
            <param name="callback">A callback that is invoked when the handle is released</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.ReleaseAsync(VNLib.Net.Http.IHttpEvent)">
            <summary>
            Releases the session from use
            </summary>
            <param name="event">The current connection event object</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.Equals(VNLib.Plugins.Essentials.Sessions.SessionHandle)">
            <summary>
            Determines if another <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/> is equal to the current handle.
            Handles are equal if neither handle is set or if their SessionData object is equal.
            </summary>
            <param name="other">The other handle to</param>
            <returns>true if neither handle is set or if their SessionData object is equal, false otherwise</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.op_Equality(VNLib.Plugins.Essentials.Sessions.SessionHandle,VNLib.Plugins.Essentials.Sessions.SessionHandle)">
            <summary>
            Checks if two <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/> instances are equal
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionHandle.op_Inequality(VNLib.Plugins.Essentials.Sessions.SessionHandle,VNLib.Plugins.Essentials.Sessions.SessionHandle)">
            <summary>
            Checks if two <see cref="T:VNLib.Plugins.Essentials.Sessions.SessionHandle"/> instances are not equal
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sessions.SessionInfo">
            <summary>
            When attached to a connection, provides persistant session storage and inforamtion based
            on a connection.
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.IsSet">
            <summary>
            A value indicating if the current instance has been initiailzed 
            with a session. Otherwise properties are undefied
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.SessionID">
            <summary>
            Key that identifies the current session. (Identical to cookie::sessionid)
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.UserAgent">
            <summary>
            Session stored User-Agent
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.IPMatch">
            <summary>
            If the stored IP and current user's IP matches
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.CrossOriginMatch">
            <summary>
            If the current connection and stored session have matching cross origin domains
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionInfo.Invalidate(System.Boolean)">
            <summary>
            Flags the session as invalid. IMPORTANT: the user's session data is no longer valid and will throw an exception when accessed
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionInfo.RegenID">
            <summary>
            Marks the session ID to be regenerated during closing event
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionInfo.GetObject``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sessions.SessionInfo.SetObject``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.CrossOrigin">
            <summary>
            Was the original session cross origin?
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.SpecifiedOrigin">
            <summary>
            The origin header specified during session creation
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.Created">
            <summary>
            Privilages associated with user specified during login
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.IsNew">
            <summary>
            Was this session just created on this connection?
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionInfo.LoginHash">
            <summary>
            Gets or sets the session's login hash, if set to a non-empty/null value, will trigger an upgrade on close
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionInfo.Token">
            <summary>
            Gets or sets the session's login token, if set to a non-empty/null value, will trigger an upgrade on close
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionInfo.UserID">
            <summary>
            <para>
            Gets or sets the user-id for the current session.
            </para>
            <para>
            Login code usually sets this value and it should be read-only
            </para>
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionInfo.Privilages">
            <summary>
            Privilages associated with user specified during login
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.UserIP">
            <summary>
            The IP address belonging to the client
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Sessions.SessionInfo.SecurityProcol">
            <summary>
            Was the session Initialy established on a secure connection?
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionInfo.SessionType">
            <summary>
            A value specifying the type of the backing session
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Sessions.SessionInfo.Item(System.String)">
            <summary>
            Accesses the session's general storage
            </summary>
            <param name="index">Key for specifie data</param>
            <returns>Value associated with the key from the session's general storage</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sql.SqlColumnName">
            <summary>
            Property attribute that specifies the property represents an SQL column in the database
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sql.SqlColumnName.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Specifies the property is an SQL column name
            </summary>
            <param name="columnName">Name of the SQL column</param>
            <param name="primaryKey"></param>
            <param name="nullable"></param>
            <param name="unique"></param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sql.SqlTableName">
            <summary>
            Allows a type to declare itself as a <see cref="T:System.Data.DataTable"/> with the specified name
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Sql.SqlVariable">
            <summary>
            Property attribute that specifies the property is to be used for a given command variable
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Sql.SqlVariable.#ctor(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Int32,System.Boolean)">
            <summary>
            Specifies the property to be used as an SQL variable
            </summary>
            <param name="variableName">Sql statement variable this property will substitute</param>
            <param name="dataType">The sql data the property will represent</param>
            <param name="direction">Data direction during execution</param>
            <param name="size">Column size</param>
            <param name="isNullable">Is this property allowed to be null</param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.Blob">
            <summary>
            Represents a stream of arbitrary binary data
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.BlobId">
            <summary>
            The current blob's unique ID
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.Modified">
            <summary>
            A value indicating if the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> has been modified
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.Deleted">
            <summary>
            A valid indicating if the blob was flagged for deletiong
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.Name">
            <summary>
            The name of the file (does not change the actual file system name)
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.LastWriteTimeUtc">
            <summary>
            The UTC time the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> was last modified
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.CreationTimeUtc">
            <summary>
            The UTC time the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> was created
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from reading from or writing to the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>
            </summary>
            <param name="position">The begining position of the range to lock</param>
            <param name="length">The range to be locked</param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.Lock">
            <summary>
            Prevents other processes from reading from or writing to the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>
            </summary>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> that was previously locked
            </summary>
            <param name="position">The begining position of the range to unlock</param>
            <param name="length">The range to be unlocked</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.Unlock">
            <summary>
            Allows access by other processes to the entire <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.OnWrite(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.Delete">
            <summary>
            Marks the file for deletion and will be deleted when the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> is disposed
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.Blob.IsReleased">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.Release">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.FlushChangesAndSetReadonlyAsync">
            <summary>
            <para>
            If the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> was opened with writing enabled, 
            and file was modified, changes are flushed to the backing store
            and the stream is set to readonly. 
            </para>
            <para>
            If calls to this method succeed the stream is placed into a read-only mode
            which will cause any calls to Write to throw a <see cref="T:System.NotSupportedException"/>
            </para>
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that may be awaited until the operation completes</returns>
            <remarks>
            This method may be called to avoid flushing changes to the backing store
            when the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> is disposed (i.e. lifetime is manged outside of the desired scope)
            </remarks>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.OnClose">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.Blob.ReleaseAsync">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.BlobExtensions.GetVersion(VNLib.Plugins.Essentials.Storage.Blob)">
            <summary>
            Gets the <see cref="T:System.Version"/> stored in the current <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>
            </summary>
            <returns>The sored version if previously set, thows otherwise</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.BlobExtensions.SetVersion(VNLib.Plugins.Essentials.Storage.Blob,System.Version)">
            <summary>
            Sets a <see cref="T:System.Version"/> for the current <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>
            </summary>
            <param name="blob"></param>
            <param name="version">The <see cref="T:System.Version"/> of the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/></param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.BlobExtensions.IsError(VNLib.Plugins.Essentials.Storage.Blob)">
            <summary>
            Gets a value indicating if the last operation left the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> in an undefined state
            </summary>
            <returns>True if the <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> state is undefined, false otherwise</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.BlobStore">
            <summary>
            Stores <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>s to the local file system backed with a single table <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageManager"/>
            that tracks changes
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.BlobStore.RootDir">
            <summary>
            The root directory all blob files are stored
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.BlobStore.BlobTable">
            <summary>
            The backing store for blob meta-data
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.BlobStore.#ctor(System.IO.DirectoryInfo,VNLib.Plugins.Essentials.Storage.LWStorageManager)">
            <summary>
            Creates a new <see cref="T:VNLib.Plugins.Essentials.Storage.BlobStore"/> that accesses files 
            within the specified root directory.
            </summary>
            <param name="rootDir">The root directory containing the blob file contents</param>
            <param name="blobStoreMan">The db backing store</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.BlobStore.OpenBlobAsync(System.String,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Opens an existing <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> from the current store
            </summary>
            <param name="fileId">The id of the file being requested</param>
            <param name="access">Access level of the file</param>
            <param name="share">The sharing option of the underlying file</param>
            <param name="bufferSize">The size of the file buffer</param>
            <returns>If found, the requested <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/>, null otherwise. Throws exceptions if the file is opened in a non-sharable state</returns>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Storage.UndefinedBlobStateException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.BlobStore.CreateBlobAsync(System.String,System.IO.FileShare,System.Int32)">
            <summary>
            Creates a new <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> for the specified file sharing permissions
            </summary>
            <param name="name">The name of the original file</param>
            <param name="share">The blob sharing permissions</param>
            <param name="bufferSize"></param>
            <returns>The newly created <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/></returns>
            <exception cref="T:VNLib.Utils.Extensions.IoExtensions"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.IObjectStorage">
            <summary>
            This object will provide methods for storing and retreiving objects by key-value pairing
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.IObjectStorage.GetObject``1(System.String)">
            <summary>
            Attempts to retrieve the specified object from storage
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Key for storage</param>
            <returns>The object in storage, or T.default if object is not found</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.IObjectStorage.SetObject``1(System.String,``0)">
            <summary>
            Stores the specified object with the specified key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">Key paired with object</param>
            <param name="obj">Object to store</param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.LWDescriptorCreationException">
            <summary>
            Raised when an operation to create a new <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/>
            fails
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWDescriptorCreationException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWDescriptorCreationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWDescriptorCreationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor">
            <summary>
            Represents an open storage object, that when released or disposed, will flush its changes to the underlying table 
            for which this descriptor represents
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.DescriptorID">
            <summary>
            The currnt descriptor's identifier string within its backing table. Usually the primary key.
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.UserID">
            <summary>
            The identifier of the user for which this descriptor belongs to
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.Created">
            <summary>
            The <see cref="T:System.DateTime"/> when the descriptor was created
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.LastModified">
            <summary>
            The last time this descriptor was updated
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.GetObject``1(System.String)">
            <inheritdoc/>
            <exception cref="T:System.Text.Json.JsonException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.SetObject``1(System.String,``0)">
            <inheritdoc/>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.GetStringValue(System.String)">
            <summary>
            Gets a string value from string storage matching a given key
            </summary>
            <param name="key">Key for storage</param>
            <returns>Value associaetd with key if exists, <see cref="F:System.String.Empty"/> otherwise</returns>
            <exception cref="T:System.ArgumentNullException">If key is null</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.SetStringValue(System.String,System.String)">
            <summary>
            Creates, overwrites, or removes a string value identified by key.
            </summary>
            <param name="key">Entry key</param>
            <param name="value">String to store or overwrite, set to null or string.Empty to remove a property</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentNullException">If key is null</exception>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.Item(System.String)">
            <summary>
            Gets or sets a string value from string storage matching a given key
            </summary>
            <param name="key">Key for storage</param>
            <returns>Value associaetd with key if exists, <seealso cref="F:System.String.Empty"/> otherwise</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ArgumentNullException">If key is null</exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.WritePendingChanges">
            <summary>
            Flushes all pending changes to the backing store. Beware, this is a synchronous, one-way update operation
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.WritePendingChangesAsync">
            <summary>
            Flushes all pending changes to the backing store asynchronously
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor.GetResource">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.LWStorageManager">
            <summary>
            Provides single table database object storage services
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Storage.LWStorageManager.NewDescriptorIdGenerator">
            <summary>
            The generator function that is invoked when a new <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> is to 
            be created without an explicit id
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.#ctor(System.Func{System.Data.Common.DbConnection},System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageManager"/> with 
            </summary>
            <param name="factory">A <see cref="T:System.Data.Common.DbConnection"/> factory function that will generate and open connections to a database</param>
            <param name="tableName">The name of the table to operate on</param>
            <param name="pkCharSize">The maximum number of characters of the DescriptorID and </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.CreateDescriptorAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> fror a given user
            </summary>
            <param name="userId">Id of user</param>
            <param name="descriptorIdOverride">An override to specify the new descriptor's id</param>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>A new <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> if successfully created, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Storage.LWDescriptorCreationException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.GetDescriptorFromUIDAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to retrieve <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> for a given user-id. The caller is responsible for 
            consitancy state of the descriptor
            </summary>
            <param name="userid">User's id</param>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>The descriptor belonging to the user, or null if not found or error occurs</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.GetDescriptorFromIDAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to retrieve the <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> for the given descriptor id. The caller is responsible for 
            consitancy state of the descriptor
            </summary>
            <param name="descriptorId">Unique identifier for the descriptor</param>
            <returns>The descriptor belonging to the user, or null if not found or error occurs</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.CleanupTableAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Cleanup entries before the specified <see cref="T:System.TimeSpan"/>. Entires are store in UTC time
            </summary>
            <param name="compareTime">Time before <see cref="P:System.DateTime.UtcNow"/> to compare against</param>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>The number of entires cleaned</returns>S
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.CleanupTableAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Cleanup entries before the specified <see cref="T:System.DateTime"/>. Entires are store in UTC time
            </summary>
            <param name="compareTime">UTC time to compare entires against</param>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>The number of entires cleaned</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.UpdateDescriptorAsync(System.Object,System.IO.Stream)">
            <summary>
            Updates a descriptor's data field
            </summary>
            <param name="descriptorObj">Descriptor to update</param>
            <param name="data">Data string to store to descriptor record</param>
            <exception cref="T:VNLib.Plugins.Essentials.Storage.LWStorageUpdateFailedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.RemoveDescriptorAsync(System.Object)">
            <summary>
            Function to remove the specified descriptor 
            </summary>
            <param name="descriptorObj">The active descriptor to remove from the database</param>
            <exception cref="T:VNLib.Plugins.Essentials.Storage.LWStorageRemoveFailedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.GetItemAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Storage.LWStorageManager.CleanupItemAsync(VNLib.Plugins.Essentials.Storage.LWStorageDescriptor,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.LWStorageRemoveFailedException">
            <summary>
            The exception raised when an open <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> removal operation fails. The 
            <see cref="P:System.Exception.InnerException"/> property may contain any nested exceptions that caused the removal to fail.
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.LWStorageUpdateFailedException">
            <summary>
            The exception raised when an open <see cref="T:VNLib.Plugins.Essentials.Storage.LWStorageDescriptor"/> update operation fails. The 
            <see cref="P:System.Exception.InnerException"/> property may contain any nested exceptions that caused the update to fail.
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Storage.UndefinedBlobStateException">
            <summary>
            Raised to signal that the requested <see cref="T:VNLib.Plugins.Essentials.Storage.Blob"/> was left in an undefined state 
            when previously accessed
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.TableManager">
            <summary>
            A class that contains basic structures for interacting with an SQL driven database
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.TableManager.TableName">
            <summary>
            The name of the table specified during initialized 
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.TableManager.GetConnection">
            <summary>
            Opens a new <see cref="T:System.Data.Common.DbConnection"/> by invoking the factory callback method
            </summary>
            <returns>The open connection</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.TimestampedCounter">
            <summary>
            Stucture that allows for convient storage of a counter value
            and a second precision timestamp into a 64-bit unsigned integer
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.TimestampedCounter.LastModified">
            <summary>
            The time the count was last modifed
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.TimestampedCounter.Count">
            <summary>
            The last failed login attempt count value
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.TimestampedCounter.#ctor(System.UInt32)">
            <summary>
            Initalizes a new flc structure with the current UTC date
            and the specified count value
            </summary>
            <param name="count">FLC current count</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.TimestampedCounter.op_Explicit(VNLib.Plugins.Essentials.TimestampedCounter)~System.UInt64">
            <summary>
            Compacts and converts the counter value and timestamp into
            a 64bit unsigned integer
            </summary>
            <param name="count">The counter to convert</param>
        </member>
        <member name="M:VNLib.Plugins.Essentials.TimestampedCounter.op_Explicit(System.UInt64)~VNLib.Plugins.Essentials.TimestampedCounter">
            <summary>
            The previously compacted <see cref="T:VNLib.Plugins.Essentials.TimestampedCounter"/> 
            value to cast back to a counter
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:VNLib.Plugins.Essentials.UnprotectedWebEndpoint">
            <summary>
            A base class for un-authenticated web (browser) based resource endpoints
            to implement. Adds additional security checks
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.UnprotectedWebEndpoint.PreProccess(VNLib.Plugins.Essentials.HttpEntity)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Users.IUser">
            <summary>
            Represents an abstract user account
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.Privilages">
            <summary>
            The user's privilage level 
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.UserID">
            <summary>
            The user's ID
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.Created">
            <summary>
            Date the user's account was created
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.PassHash">
            <summary>
            The user's password hash if retreived from the backing store, otherwise null
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.Status">
            <summary>
            Status of account
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.LocalOnly">
            <summary>
            Is the account only usable from local network?
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.Users.IUser.EmailAddress">
            <summary>
            The user's email address
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUser.Delete">
            <summary>
            Marks the user for deletion on release
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Users.IUserManager">
            <summary>
            A backing store that provides user accounts
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.GetUserFromIDAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get a user object without their password from the database asynchronously
            </summary>
            <param name="userId">The id of the user</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>The user's <see cref="T:VNLib.Plugins.Essentials.Users.IUser"/> object, null if the user was not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.GetUserFromEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get a user object without their password from the database asynchronously
            </summary>
            <param name="emailAddress">The user's email address</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>The user's <see cref="T:VNLib.Plugins.Essentials.Users.IUser"/> object, null if the user was not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.GetUserAndPassFromIDAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get a user object with their password from the database on the current thread
            </summary>
            <param name="userid">The id of the user</param>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>The user's <see cref="T:VNLib.Plugins.Essentials.Users.IUser"/> object, null if the user was not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.GetUserAndPassFromEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get a user object with their password from the database asynchronously
            </summary>
            <param name="emailAddress">The user's email address</param>
            <param name="cancellationToken">A token to cancel the operation</param>
            <returns>The user's <see cref="T:VNLib.Plugins.Essentials.Users.IUser"/> object, null if the user was not found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.CreateUserAsync(System.String,System.String,System.UInt64,VNLib.Utils.Memory.PrivateString,System.Threading.CancellationToken)">
            <summary>
            Creates a new user in the current user's table and if successful returns the new user object (without password)
            </summary>
            <param name="userid">The user id</param>
            <param name="privilages">A number representing the privilage level of the account</param>
            <param name="passHash">Value to store in the password field</param>
            <param name="cancellation">A token to cancel the operation</param>
            <param name="emailAddress">The account email address</param>
            <returns>An object representing a user's account if successful, null otherwise</returns>
            <exception cref="T:VNLib.Plugins.Essentials.Users.UserExistsException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:VNLib.Plugins.Essentials.Users.UserCreationFailedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.UpdatePassAsync(VNLib.Plugins.Essentials.Users.IUser,VNLib.Utils.Memory.PrivateString,System.Threading.CancellationToken)">
            <summary>
            Updates a password associated with the specified user. If the update fails, the transaction
            is rolled back.
            </summary>
            <param name="user">The user account to update the password of</param>
            <param name="newPass">The new password to set</param>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>The result of the operation, the result should be 1 (aka true)</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.IUserManager.GetUserCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the number of entries in the current user table
            </summary>
            <param name="cancellation">A token to cancel the operation</param>
            <returns>The number of users in the table, or -1 if the operation failed</returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Users.UserCreationFailedException">
            <summary>
            Raised when a user creation operation has failed and could not be created
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Users.UserDeleteException">
            <summary>
            Raised when a user flagged for deletion could not be deleted. See the <see cref="P:System.Exception.InnerException"/> 
            for the Exception that cause the opertion to fail
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Users.UserExistsException">
            <summary>
            Raised when an <see cref="T:VNLib.Plugins.Essentials.Users.IUserManager"/> operation 
            fails because the user account already exists
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.UserExistsException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.UserExistsException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.UserExistsException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:VNLib.Plugins.Essentials.Users.UserExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Users.UserStatus.Unverified">
            <summary>
            Unverified account state
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Users.UserStatus.Active">
            <summary>
            Active account state. The account is fully functional
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Users.UserStatus.Suspended">
            <summary>
            The account is suspended
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Users.UserStatus.Inactive">
            <summary>
            The account is inactive as marked by the system
            </summary>
        </member>
        <member name="F:VNLib.Plugins.Essentials.Users.UserStatus.Locked">
            <summary>
            The account has been locked from access
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.Users.UserUpdateException">
            <summary>
            Raised when a user-data object was modified and an update operation failed
            </summary>
        </member>
        <member name="T:VNLib.Plugins.Essentials.VirtualEndpoint`1">
            <summary>
            Provides a base class for <see cref="T:VNLib.Plugins.IVirtualEndpoint`1"/> entity processors
            with checks and a log provider
            </summary>
            <typeparam name="T">The entity type to process</typeparam>
        </member>
        <member name="P:VNLib.Plugins.Essentials.VirtualEndpoint`1.Path">
            <inheritdoc/>
        </member>
        <member name="F:VNLib.Plugins.Essentials.VirtualEndpoint`1.Log">
            <summary>
            An <see cref="T:VNLib.Utils.Logging.ILogProvider"/> to write logs to
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.VirtualEndpoint`1.InitPathAndLog(System.String,VNLib.Utils.Logging.ILogProvider)">
            <summary>
            Sets the log and path and checks the values
            </summary>
            <param name="Path">The path this instance represents</param>
            <param name="log">The log provider that will be used</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.VirtualEndpoint`1.Process(`0)">
            <inheritdoc/>
        </member>
        <member name="T:VNLib.Plugins.Essentials.WebsocketAcceptedCallback">
            <summary>
            A callback method to invoke when an HTTP service successfully transfers protocols to 
            the WebSocket protocol and the socket is ready to be used
            </summary>
            <param name="session">The open websocket session instance</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that will be awaited by the HTTP layer. When the task completes, the transport 
            will be closed and the session disposed
            </returns>
        </member>
        <member name="T:VNLib.Plugins.Essentials.WebSocketSession">
            <summary>
            Represents a <see cref="T:System.Net.WebSockets.WebSocket"/> wrapper to manage the lifetime of the captured
            connection context and the underlying transport. This session is managed by the parent
            <see cref="T:VNLib.Net.Http.HttpServer"/> that it was created on.
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.WebSocketSession.Token">
            <summary>
            A cancellation token that can be monitored to reflect the state 
            of the webscocket
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.WebSocketSession.SocketID">
            <summary>
            Id assigned to this instance on creation
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.WebSocketSession.SubProtocol">
            <summary>
            Negotiated sub-protocol
            </summary>
        </member>
        <member name="P:VNLib.Plugins.Essentials.WebSocketSession.UserState">
            <summary>
            A user-defined state object passed during socket accept handshake
            </summary>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.RunAsync(System.IO.Stream)">
            <summary>
            Initialzes the created websocket with the specified protocol 
            </summary>
            <param name="transport">Transport stream to use for the websocket</param>
            <returns>The accept callback function specified during object initialization</returns>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.ReceiveAsync(System.ArraySegment{System.Byte})">
            <summary>
            Asynchronously receives data from the Websocket and copies the data to the specified buffer
            </summary>
            <param name="buffer">The buffer to store read data</param>
            <returns>A task that resolves a <see cref="T:System.Net.WebSockets.WebSocketReceiveResult"/> which contains the status of the operation</returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.ReceiveAsync(System.Memory{System.Byte})">
            <summary>
            Asynchronously receives data from the Websocket and copies the data to the specified buffer
            </summary>
            <param name="buffer">The buffer to store read data</param>
            <returns></returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
            <summary>
            Asynchronously sends the specified buffer to the client of the specified type
            </summary>
            <param name="buffer">The buffer containing data to send</param>
            <param name="type">The message/data type of the packet to send</param>
            <param name="endOfMessage">A value that indicates this message is the final message of the transaction</param>
            <returns></returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.SendAsync(System.ReadOnlyMemory{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
            <summary>
            Asynchronously sends the specified buffer to the client of the specified type
            </summary>
            <param name="buffer">The buffer containing data to send</param>
            <param name="type">The message/data type of the packet to send</param>
            <param name="endOfMessage">A value that indicates this message is the final message of the transaction</param>
            <returns></returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.CloseSocketAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String)">
            <summary>
            Properly closes a currently connected websocket 
            </summary>
            <param name="status">Set the close status</param>
            <param name="reason">Set the close reason</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:VNLib.Plugins.Essentials.WebSocketSession.CloseSocketOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <param name="reason"></param>
            <param name="cancellation"></param>
            <returns></returns>
        </member>
    </members>
</doc>
